#+title: Bonk Startup
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./../core/bonk-startup.el :mkdirp yes

* Bonk Startup

#+begin_src emacs-lisp
(provide 'bonk-startup)
#+end_src

* System

#+begin_src emacs-lisp

  ;; Check the system used
  (defconst ON-LINUX   (eq system-type 'gnu/linux))
  (defconst ON-MAC     (eq system-type 'darwin))
  (defconst ON-BSD     (or ON-MAC (eq system-type 'berkeley-unix)))
  (defconst ON-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))

#+end_src

* Font And Theme settings

#+begin_src emacs-lisp

  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)

  (setup (:pkg base16-theme :straight t))
  (setup (:pkg spacegray-theme :straight t))
  (setup (:pkg doom-themes :straight t))
  (setup (:pkg atom-dark-theme :straight t))
  (setup (:pkg atom-one-dark-theme :straight t))
  (setup (:pkg srcery-theme :straight t))
  (setup (:pkg xresources-theme :straight t))
  (setup (:pkg darkokai-theme :straight t))
  (setup (:pkg vampyricdark-theme :straight t))
  (setup (:pkg spacemacs-theme :straight t))
  (setup (:pkg solo-jazz-theme :straight t))
  (setup (:pkg jazz-theme :straight t))
  (setup (:pkg apropospriate-theme :straight t))

  (add-hook 'emacs-startup-hook
			(lambda ()
			  (custom-set-faces
			   '(default ((t (:font "Comic Code Ligatures-14"))))
			   '(fixed-pitch ((t (:inherit (default)))))
			   '(fixed-pitch-serif ((t (:inherit (default)))))
			   '(variable-pitch ((t (:font "Fira Code-10"))))))
			(load-theme 'base16-gruvbox-material-light-hard t))

#+end_src

#+RESULTS:
| lambda | nil | (message Bonk Emacs loaded in %s. (emacs-init-time))                                                                                                                  |
| lambda | nil | (custom-set-faces '(default ((t (:font Comic Code Ligatures-14)))) '(fixed-pitch ((t (:inherit (default))))) '(fixed-pitch-serif ((t (:inherit (default))))) '(variable-pitch ((t (:font Fira Code-10))))) |

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-doom-themes"
  "emacs-spacegray-theme"

#+end_src

** Ligatures

#+begin_src emacs-lisp

	;; (C-q Tab) inserts a tab space
	(add-hook 'ess-mode-hook (lambda () (local-set-key "\t" 'self-insert-command)))
  (load-file "./ligature.el")
  (use-package ligature
	:load-path "."
	:config
	;; Enable the "www" ligature in every possible major mode
	(ligature-set-ligatures 't '("www"))
	;; Enable traditional ligature support in eww-mode, if the
	;; `variable-pitch' face supports it
	(ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
	;; Enable all Cascadia Code ligatures in programming modes
	(ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
										 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
										 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
										 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
										 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
										 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
										 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
										 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
										 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
										 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
										 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
										 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
										 "\\\\" "://"))
	;; Enables ligature checks globally in all buffers. You can also do it
	;; per mode with `ligature-mode'.
	(global-ligature-mode t))

#+end_src

** Daemon settings

#+begin_src emacs-lisp

  (if (daemonp)
	  (add-hook 'after-make-frame-functions
				(lambda (frame)
				  (select-frame frame)
				  )))

#+end_src





* Keep .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp
  
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))
  
  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (setup (:pkg no-littering :straight t)
    (require 'no-littering))
  
  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
  
#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-no-littering"

#+end_src

Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)
  
#+end_src

* Enable Mode DiminishIng

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+begin_src emacs-lisp

  (setup (:pkg diminish :straight t))

#+end_src
