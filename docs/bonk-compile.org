#+title: Main Lib
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./../core/bonk-compile.el :mkdirp yes

* Compile Variables
#+begin_src emacs-lisp
  ;; This module defines variables, functions and hooks to enable
  ;; automatic compilation of some emacs-lisp source files.

  ;; This could be activated for the `core' subdirectory under your
  ;; `user-emacs-directory', your files under `bonk-config-path', or
  ;; all files with mode `emacs-lisp-mode' after saving the file.

  ;; It also chooses to compile to byte-code or native code depending if
  ;; the feature is available on the current build.

  ;;;; Variables:
  ;; We define a variable to enable/disable core compilation.
  (defvar bonk-compile-core t
	"When non-nil, compile emacs lisp sources for the core on startup.")

  ;; We define a variable to enable/disable user's core compilation.
  (defvar bonk-compile-user-modules nil
	"When non-nil, compile user's emacs lisp sources for the modules on startup.")

  (defvar bonk-compile-module-list '()
	"A list of core to compile.")

  (defvar bonk-compile-core-path
	`(;; ,(expand-file-name "core" bonk-config-path)
	  ,(expand-file-name "core" user-emacs-directory))
	"Path where to locate core.")

  (defvar bonk-compile-user-configuration t
	"When non-nil, compile emacs lisp sources for the modules on startup.")

  (defvar bonk-compile-init-files t
	"When non-nil, compile init files on startup.")

  (defvar bonk-compile-on-save nil
	"When non-nil, compile the file after saving it.")

  (defvar bonk-compile-extra-directories-list nil
	"List of extra directories to search for source-files.

  This could be another directory added to `load-path', that is not
  standard, nor is it part of bonk-emacs.")

  (defvar bonk-compile-init-files-list
	'("early-init.el" "init.el")
	"List of initialization file names.")

  (defvar bonk-compile-config-files-list
	'("early-config.el" "main.el")
	"List of configuration file names.")

#+end_src

#+RESULTS:
: bonk-compile-config-files-list

* Compile Functions

#+begin_src emacs-lisp
  
  ;;;; Functions:
  ;; A function to locate a module's source file:
  (defun bonk-locate-module-file (module &optional path)
	"Locates the source-file for the MODULE.

  MODULE must be a symbol.

  If the optional argument PATH is non-nil, it asumes it is a list
  containing the name of the directories to search for the
  source-file.  If it is ommited or nil, it will search in the
  directories defined in `bonk-compile-core-path' and
  `bonk-compile-extra-directories-list'.

  It returns the first source-file that matches for the MODULE in
  the order specified search path.  If it finds none, it retorns
  nil."
	(let ((dir (seq-find (lambda (dir)
				 (file-exists-p (expand-file-name (format "%s.el" (symbol-name module)) dir)))
			   (or path
				   (flatten-list `(,bonk-compile-core-path
								   ,bonk-compile-extra-directories-list))))))
	  (when dir
		(expand-file-name (format "%s.el" (symbol-name module)) dir))))

  ;; A function to locate native compiled files.
  (defun bonk-compile-locate-eln-file (library)
	"Locates the native-compiled file for LIBRARY."
	(let ((return nil))
	  (dolist (dir (mapcar (lambda (path)
							 (expand-file-name comp-native-version-dir path))
						   native-comp-eln-load-path))
		(when (and (not return)
				   (file-exists-p dir))
		  (let ((prefix (expand-file-name library dir)))
			(dolist (file-base (directory-files dir))
			  (let ((file (expand-file-name file-base dir)))
				(when (and (not return)
						   (string-prefix-p prefix file)
						   (string-suffix-p ".eln" file))
				  (setq return (expand-file-name file-base dir))))))))
	  return))

  ;; A function to compile a specific file
  (defun bonk-compile-file (f)
	"Compiles (native or byte-code) the file F.

  F could be a single file or a list of files.

  If F is a directory or contains a directory, the content of that
  directory will be compiled, but not it's subdirectories."
	(setq f (flatten-list (list f)))
	(message "Compiling file(s): %s" f)
	(if (featurep 'native-compile)
		(dolist (source f)
		  (let ((cache (bonk-compile-locate-eln-file (file-name-base source))))
			(if (and (or (null cache)
						 (file-newer-than-file-p cache source))
					 (file-exists-p source))
				(native-compile-async f)
			  (message "Skipping compilation of file %s" source))))
	  (dolist (source f)
		(when (file-exists-p source)
		  (if (file-directory-p source)
			  (byte-recompile-directory source 0)
			(byte-recompile-file source nil 0))))))

  ;; A function to compile the buffer's file
  (defun bonk-compile-buffer (&optional b)
	"Compiles (native or byte-code) the file of buffer B."
	(when (and b ;; Let's be sure it is not nil
			   (not (bufferp b)))
	  (cl-return nil))
	(let ((file (buffer-file-name b)))
	  (when file
		(bonk-compile-file file))))

  ;; A function to compile a specific directory
  (defun bonk-compile-directory (d)
	"Compiles (native or byte-ocde) the files within directory D.

  D could be a single directory or a list of directories."
	(setq d (flatten-list (list d)))
	(message "Compiling directory/ies: %s" d)
	(if (featurep 'native-compile)
		(native-compile-async d t)
	  (dolist (source d)
		(byte-recompile-directory source 0))))

  ;; A function to get the list of core directories with full path:
  (defun bonk-compile--config-dirs-list ()
	"Returns a list of configured directories to autocompile."
	(flatten-list `(,(and bonk-compile-core
						  (expand-file-name "core/" user-emacs-directory)))
					,bonk-compile-extra-directories-list))

  ;; A function to get the list of init files with full path:
  (defun bonk-compile--init-files-list ()
	"Returns a list of the init files."
	(mapcar (lambda (f)
			  (expand-file-name f user-emacs-directory))
			bonk-compile-init-files-list))

  (defun bonk-compile--config-files-list ()
	"Returns a list of the init files."
	(mapcar (lambda (f)
			  (expand-file-name f bonk-config-path))
			bonk-compile-config-files-list))
  ;;(bonk-compile--config-files-list)

  ;; A function to execute the compilation of the core within the list:
  (defun bonk-compile-core ()
	"Compile specific files defined in `bonk-compile-module-list'.

  If `bonk-compile-init-files' is non-nil, then it compiles
  the init-files (`bonk-compile-init-files-list') within
  `user-emacs-directory'.

  If `bonk-compile-user-configuration' is non-nil, then it
  compiles the config-files (`bonk-compile-config-files-list')
  within `bonk-config-path'.

  If `bonk-compile-core' is non-nil, then it compiles all
  the source-files for the core defined in
  `bonk-compile-module-list' within the subdirectory 'core'
  in `user-emacs-directory', or in any directory specified in
  `bonk-compile-extra-directories-list'.

  If `bonk-compile-user-modules' is non-nil, then it compiles
  all the source-files for the modules defined in
  `bonk-compile-module-list' within the subdirectory 'modules'
  in `bonk-config-path'.

  If any source-file for any module specified in
  `bonk-compile-module-list' doesn't exist within the paths
  specified, then it is ignored without a warning."
	(interactive)
	(when bonk-compile-init-files
	  (bonk-compile-init))
	(when bonk-compile-user-configuration
	  (bonk-compile-config))
	(when bonk-compile-core
	  (dolist (module bonk-compile-module-list)
		(let ((module-src (bonk-locate-module-file module
													   (flatten-list
														`(,(expand-file-name "core/" user-emacs-directory)
														  ,bonk-compile-extra-directories-list)))))
		  (when module-src
			(bonk-compile-file module-src)))))
	(when bonk-compile-user-modules
	  (dolist (module bonk-compile-module-list)
		(let ((module-src (bonk-locate-module-file module
													   `(,(expand-file-name "custom-modules/" bonk-config-path)))))
		  (when module-src
			(bonk-compile-file module-src))))))

#+end_src

#+RESULTS:
: bonk-compile-modules

* Compile Hook
#+begin_src emacs-lisp
  ;; A funciton to execute the compilation of the init files:
  (defun bonk-compile-init ()
	"Compile (native or byte-code) the initialization files.

  The files to be compiled is defined in
  `bonk-compile-init-files-list'."
	(interactive)
	(bonk-compile-file (bonk-compile--init-files-list)))

  ;; A funciton to execute the compilation of the config files:
  (defun bonk-compile-config ()
	"Compile (native or byte-code) the configuration files.

  The files to be compiled is defined in
  `bonk-compile-config-files-list'."
	(interactive)
	(bonk-compile-file (bonk-compile--config-files-list)))

  
  ;;;; Hooks:

  ;;;;; Modules
  ;; To autocompile modules.  This could be toggled by setting
  ;; `bonk-compile-core' or
  ;; `bonk-compile-user-configuration' either to `nil' or
  ;; `t'.
  (add-hook 'emacs-startup-hook ;; or kill-emacs-hook?
			(lambda ()
			  (when (or bonk-compile-core
						bonk-compile-user-modules
						bonk-compile-init-files
						bonk-compile-user-configuration)
				(bonk-compile-core))))

  ;;;;; On save files
  ;; To auto compile after saving the file.  This could be toggled by
  ;; seting `bonk-compile-on-save' to `nil' or `t'
  (add-hook 'after-save-hook
			(lambda ()
			  (when (and bonk-compile-on-save
						 (string-equal major-mode "emacs-lisp-mode"))
				(bonk-compile-buffer))))

#+end_src

* Provide
#+begin_src emacs-lisp
  ;;; Package:
  (provide 'bonk-compile)
  ;;; bonk-compile.el ends here

#+end_src

