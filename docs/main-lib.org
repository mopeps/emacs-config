#+title: Main Lib
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./../core/main-lib.el :mkdirp yes

* Requirements

Here you'll find all of the modules/libraries required by the main file and the main-lib

#+begin_src emacs-lisp
  (provide 'main-lib)
  (require 'package)
  (require 'cl-lib)
#+end_src

* Helpers
** Load Env Vars
Read and set envvars from FILE. If NOERROR is non-nil, don't throw an error if the file doesn't exist
or is unreadable. Returns the names of envvars that were changed."
#+begin_src emacs-lisp

  (defun bonk/load-envvars-file (file &optional noerror)
	(if (null (file-exists-p file))
		(unless noerror
		  (signal 'file-error (list "No envvar file exists" file)))
	  (with-temp-buffer
		(insert-file-contents file)
		(when-let (env (read (current-buffer)))
		  (let ((tz (getenv-internal "TZ")))
			(setq-default
			 process-environment
			 (append env (default-value 'process-environment))
			 exec-path
			 (append (split-string (getenv "PATH") path-separator t)
					 (list exec-directory))
			 shell-file-name
			 (or (getenv "SHELL")
				 (default-value 'shell-file-name)))
			(when-let (newtz (getenv-internal "TZ"))
			  (unless (equal tz newtz)
				(set-time-zone-rule newtz))))
		  env))))

  #+end_src

** Infer Indent Style

It's a useful helper when working with more than one standard of code.
  #+begin_src emacs-lisp
	(defun bonk/infer-indent-style ()
	  ;; Honestly, This is more of a wild guess since we could be using tabs and having it wrongly
	  ;; configure on our ide
	  (let ((space-count (how-many "^ "))
			(tab-count (how-many "^\t")))
		(if (> space-count tab-count )
			(setq indent-tabs-mode nil))
		(if (> tab-count space-count)
			(setq indent-tabs-mode t))))

	(defun bonk/set-font (font-name)
	  (interactive "sSet font name: ")
		(set-face-attribute 'default nil
							:font font-name
							:weight 'normal
							:slant 'italic))
#+end_src

* Sugars
** file!
Return the emacs lisp file this function is called from.

  #+begin_src emacs-lisp

	(defun file! ()
	  (cond ((bound-and-true-p byte-compile-current-file))
			(load-file-name)
			((stringp (car-safe current-load-list))
			 (car current-load-list))
			(buffer-file-name)
			((error "Cannot get this file-path"))))

  #+end_src

** dir! 
Return the emacs lisp dir this function is called from.

#+begin_src emacs-lisp

	(defun dir! ()
	  (when-let (path (file!))
		(directory-file-name (file-name-directory path))))

  #+end_src

** Eval-If!
Expands to THEN if COND is non-nil, to BODY otherwise. COND is checked at compile/expansion time,
allowing BODY to be omitted entirely when the elisp is byte-compiled. Use this for forms that
contain expensive macros that could safely be removed at compile time.

  
  #+begin_src emacs-lisp
	(defmacro eval-if! (cond then &rest body)
	  (declare (indent 2))
	  (if (eval cond)
		  then
		(macroexp-progn body)))

  #+end_src

** Eval-When!
Expands to BODY if CONDITION is non-nil at compile/expansion time.
  
  #+begin_src emacs-lisp
	(defmacro eval-when! (cond &rest body)
	  (declare (indent 1))
	  (when (eval cond)
		(macroexp-progn body)))

  #+end_src

** fn!
Returns (cl-function (lambda ARGLIST BODY...)) The closure is wrapped in `cl-function', meaning
ARGLIST will accept anything `cl-defun' will. Implicitly adds `&allow-other-keys' if `&key' is
present in ARGLIST.

  #+begin_src emacs-lisp

	;;; Closure factories
	(defmacro fn! (arglist &rest body)
	  (declare (indent defun) (doc-string 1) (pure t) (side-effect-free t))
	  `(cl-function
		(lambda
		  ,(letf! (defun* allow-other-keys (args)
					(mapcar
					 (lambda (arg)
					   (cond ((nlistp (cdr-safe arg)) arg)
							 ((listp arg) (allow-other-keys arg))
							 (arg)))
					 (if (and (memq '&key args)
							  (not (memq '&allow-other-keys args)))
						 (if (memq '&aux args)
							 (let (newargs arg)
							   (while args
								 (setq arg (pop args))
								 (when (eq arg '&aux)
								   (push '&allow-other-keys newargs))
								 (push arg newargs))
							   (nreverse newargs))
						   (append args (list '&allow-other-keys)))
					   args)))
			 (allow-other-keys arglist))
		  ,@body)))

  #+end_src

** Commands

*** cmd!
  
Returns (lambda () (interactive) ,@body). A factory for quickly producing interaction commands,
particularly for keybinds or aliases.

  #+begin_src emacs-lisp
	(defmacro cmd! (&rest body)
	  (declare (doc-string 1) (pure t) (side-effect-free t))
	  `(lambda (&rest _) (interactive) ,@body))

  #+end_src


** kbd! (Keyboard) 

  #+begin_src emacs-lisp

	(defalias 'kbd! #'general-simulate-key)

  #+end_src
