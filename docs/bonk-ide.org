+title: Bonk-ide
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./../core/bonk-ide.el :mkdirp yes

* Provide

#+begin_src emacs-lisp

  (provide 'bonk-ide)

#+end_src

#+RESULTS:
: bonk-ide

* Development
** General configs

   Here is the config for wether using tabs, how to indent, how many spaces, etc.
*** Prog-mode

***** Path from shell

#+begin_src emacs-lisp

  (setup (:pkg exec-path-from-shell :straight t)
	:ensure t
	(exec-path-from-shell-initialize))
#+end_src

***** Commenting Lines
#+begin_src emacs-lisp
(setup (:pkg evil-nerd-commenter :straight t)
  (:global "M-/" evilnc-comment-or-uncomment-lines))
#+end_src

#+RESULTS:
: evilnc-comment-or-uncomment-lines

***** Folding with Origami
#+begin_src emacs-lisp
  (setup (:pkg origami :straight t)
	(:hook-into c-mode
				emacs-lisp-mode
				go-mode
				yaml-mode))
#+end_src

#+RESULTS:
| origami-mode |

***** Infer Indent Style

#+begin_src emacs-lisp

  (defun bonk/infer-indent-style ()
	;; Honestly, This is more of a wild guess since we could be using tabs and having it wrongly
	;; configure on our ide
	(let ((space-count (how-many "^ "))
		  (tab-count (how-many "^\t")))
	  (if (> space-count tab-count )
		  (setq indent-tabs-mode nil))
	  (if (> tab-count space-count)
		  (setq indent-tabs-mode t))))

#+end_src

#+RESULTS:
: bonk/infer-indent-style

***** Configuration
   #+begin_src emacs-lisp
					(defun bonk/prog-mode-settings ()
					  (setq-default tab-width 4) ; I want tabs to be four spaces wide
					  (setq standard-indent 4) ; I want indent to be four spaces wide
					  (show-paren-mode t)
					  (display-line-numbers-mode)
					  (setq whitespace-style '(face tab-mark trailing))
					  (custom-set-faces
						'(whitespace-tab ((t (:foreground "#636363")))))
					  (setq whitespace-display-mappings '((tab-mark 9 [9474 9] [92 9])))
					  (setq-local show-trailing-whitespace t)
					  (bonk/infer-indent-style)
					  (whitespace-mode))

					(add-hook 'prog-mode-hook 'bonk/prog-mode-settings)
					;; Indentation levels for each lang
					(defvaralias 'js2-basic-offset 'tabwidth)
					(defvaralias 'js-indent-level 'tab-width)
					(defvaralias 'js-indent-level 'tab-width)
					(defvaralias 'rjsx-indent-level 'tab-width)
					(defvaralias 'rjsx-mode-markup-indent-offset 'tab-width)
					(defvaralias 'rjsx-mode-code-indent-offset 'tab-width)
					(defvaralias 'web-mode-css-indent-offset 'tab-width)
					(defvaralias 'js2-indent-level 'tab-width)

					;; Increase for better lsp-mode performance; see
					;; https://emacs-lsp.github.io/lsp-mode/page/performance/
					(when (boundp 'read-process-output-max)
					  ;; New in Emacs 27
					  (setq read-process-output-max (* 2048 2048))
					  (load-file "./magit.el"))
   #+end_src

   #+RESULTS:
   : t

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (setup (:pkg company :straight t)
		 (:hook-into lsp-mode)
		 (:bind
		  "<tab>" company-complete-selection
		  "<tab>" company-indent-or-complete-common)
		 (setq company-lsp-cache-candidates 'auto)
		 (setq company-minimum-prefix-length 1)
		 (setq company-idle-delay 0.15)
		 (setq company-auto-complete nil)
		 (setq company-tooltip-minimum-width 60))

  (global-company-mode t)

  (setup (:pkg all-the-icons-completion :straight t))

  ;; (setup (:pkg company-box :straight t)
  ;; 	   (:hook-into company-mode)
  ;; 	   (require 'all-the-icons)
  ;; 	   (setq company-box-icons-alist 'company-box-icons-all-the-icons
  ;; 			 ;; These are the Doom Emacs defaults
  ;; 			 ))


#+end_src

#+RESULTS:
: t

*** Company Backends
**** Ruby
     #+begin_src emacs-lisp
	   (setup (:pkg company-inf-ruby :straight t)
	   (:load-after company)
	   (add-to-list 'company-backends 'company-inf-ruby))
     #+end_src


	 #+RESULTS:
	 
** Languages
*** LSP
**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp


  (defun bonk/lsp-mode-setup ()
	(setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	(lsp-headerline-breadcrumb-mode))

  (setup (:pkg lsp-mode :straight t)
		 (:hook bonk/lsp-mode-setup )
		 (:hook-into typescript-mode rsjx-mode web-mode ruby-mode)
		 (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
		 (:option lsp-enable-which-key-integration t)
		 (setq lsp-completion-enable t)
		 (:when-loaded
		  (progn
			(setq lsp-language-id-configuration '((java-mode . "java")
												  (python-mode . "python")
												  (gfm-view-mode . "markdown")
												  (rust-mode . "rust")
												  (css-mode . "css")
												  (xml-mode . "xml")
												  (c-mode . "c")
												  (c++-mode . "cpp")
												  (objc-mode . "objective-c")
												  (web-mode . "html")
												  (html-mode . "html")
												  (sgml-mode . "html")
												  (mhtml-mode . "html")
												  (go-mode . "go")
												  (haskell-mode . "haskell")
												  (php-mode . "php")
												  (json-mode . "json")
												  (rjsx-mode . "javascript")
												  ))

			(setq lsp-diagnostics-provider :none)

			(:option lsp-file-watch-threshold nil)
			(:option lsp-solargraph-multi-root nil)
			;; enable / disable the hints as you prefer: (setq lsp-auto-guess-root t)
  (setq lsp-log-io nil)
  (setq lsp-restart 'auto-restart)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-signature-render-documentation nil)
  (setq lsp-eldoc-hook nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-semantic-tokens-enable nil)
  (setq lsp-enable-folding nil)
  (setq lsp-enable-imenu nil)
  (setq lsp-enable-snippet nil)
  (setq read-process-output-max (* 1024 1024)) ;; 1MB
  (setq lsp-idle-delay 0.5)
			)))
#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more
like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning
of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (setup (:pkg lsp-ui :straight t)
		 (:hook-into lsp-mode)
		 (:when-loaded
		  (progn
			(setq lsp-ui-sideline-enable t)
			(setq lsp-ui-sideline-show-hover nil)
			(setq lsp-ui-doc-enable t)
			(setq lsp-ui-doc-position 'bottom))))

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

	(setup (:pkg lsp-ivy :straight t)
	  (:load-after lsp-mode))

#+end_src

*** TODO Eglot
#+begin_src emacs-lisp
	;; 	(setup (:pkg eglot :straight t)
	;; 		   :ensure t)
	;; ;;  hooks
	;; 	(defun bonk-ide--add-eglot-hooks (mode-list)
	;; 	  "Iterates over MODE-LIST recursively to add eglot-ensure to
	;; 	existing mode hooks.

	;; 	The mode must be loaded, ie. found with `fboundp'. A mode which
	;; 	is not loaded will not have a hook added, in which case add it
	;; 	manually with something like this:

	;; 	`(add-hook 'some-mode-hook #'eglot-ensure)'
	;; 	"
	;; 	  (dolist (mode-def mode-list)
	;; 		(let ((mode (if (listp mode-def) (car mode-def) mode-def)))
	;; 		  (cond
	;; 		   ((listp mode) (bonk-ide--add-eglot-hooks mode))
	;; 		   (t
	;; 			(when (and (fboundp mode)
	;; 					   (not (eq 'clojure-mode mode))  ; prefer cider
	;; 					   (not (eq 'lisp-mode mode))     ; prefer sly/slime
	;; 					   (not (eq 'scheme-mode mode))   ; prefer geiser
	;; 					   )
	;; 			  (let ((hook-name (concat (symbol-name mode) "-hook")))
	;; 				(message (concat "adding eglot to " hook-name))
	;; 				(add-hook (intern hook-name) #'eglot-ensure))))))))

	;; ;; add eglot to existing programming modes when eglot is loaded.
	;; (with-eval-after-load "eglot"
	;; 	(bonk-ide--add-eglot-hooks eglot-server-programs))

	;; 	;;; customization
	;; 	;; Shutdown server when last managed buffer is killed
	;; 	(customize-set-variable 'eglot-autoshutdown t)
#+end_src

#+RESULTS:
: t

*** Yasnippets
    Yasnippet automatically inserts code templates when I write a word and press the tab key.
    It predefines most of the common templates, including the dreadful =if err !\=nil { ....=

    #+begin_src emacs-lisp

			  (setup (:pkg yasnippet :straight t)                  ; Snippets
				(:load-after company-mode)
				(yas-global-mode 1))

				(with-eval-after-load 'yasnippet
				 (setq yas-snippt-dirs '(yasnippet-snippets-dir))
				(setq
				 yas-verbosity 1                      ; No need to be so verbose
				 yas-wrap-around-region t)
				(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
				(yas-reload-all))


			  (setup (:pkg yasnippet-snippets :straight t)         ; Collection of snippets
				(:load-after yasnippet))
    #+end_src

*** Flycheck

    Flycheck is one of the two main packages for code checks in the background. The
    other one is Flymake. I use Flycheck because it allows me to define a custom “advanced”
    checker.
    #+begin_src emacs-lisp

	  (setup (:pkg flycheck :straight t)
		(:hook-into company-mode lsp-mode)
		(setq flycheck-check-syntax-automatically `(idle-change mode-enabled))
		(setq flycheck-idle-change-delay 4)
		(setq flycheck-disabled-checkers
			  '(ruby ruby-reek
					 ruby-standard
					 ;; ruby-rubocop
					 ruby-rubylint
					 yaml-ruby)))

	#+end_src

*** Python
#+begin_src emacs-lisp
	(add-hook 'python-mode-hook 'flycheck-mode)

	(with-eval-after-load 'company
	  (add-hook 'python-mode-hook 'company-mode))

	(setup (:pkg company-jedi :straight t)
	  (:when-loaded
		(progn
		  (add-to-list 'company-backends 'company-jedi))))

	(defun python-mode-company-init ()
	  (setq-local company-backends '((company-jedi
									  company-etags
									  company-dabbrev-code))))
  (setup (:pkg python-mode)
	(:hook lsp-deferred))
  
	(with-eval-after-load 'python-mode
	  (lambda () (require 'lsp-pyright)))
  (setup (:pkg lsp-pyright :straight t)
	(:when-loaded
	  (progn
		(when (executable-find "python3")
		  (setq lsp-pyright-python-executable-cmd "python3")))))
  (setup (:pkg pyenv :straight t)
	(:load-after python-mode))

  (setup (:pkg conda :straight t)
	(:load-after python-mode))
#+end_src

*** Ruby
**** ruby-mode
     #+begin_src emacs-lisp
			  (setup ruby-mode
			   (:file-match "\\.rb\\'")
			   (:hook lsp-deferred)
			   (setq ruby-indent-level 4)
				(setq ruby-indent-tabs-mode t)
				)

			  ;; (setup (:pkg enh-ruby-mode :straight t)
			  ;; 	(:hook-into ruby-mode)
			  ;; 	(setq enh-ruby-indent-tabs-mode t))

     #+end_src

**** robe-mode
     #+begin_src emacs-lisp
					 (setup (:pkg robe-mode :straight t)
					   (:hook-into ruby-mode))
					 (eval-after-load 'company
					   '(push 'company-robe company-backends))
     #+end_src

     #+RESULTS:

**** rspec-mode
     #+begin_src emacs-lisp
			  (setup (:pkg rspec-mode :straight t)
				(:hook-into ruby-mode))
     #+end_src

     #+RESULTS:
     : t

*** Golang
    
    #+begin_src emacs-lisp
	  (setup (:pkg go-mode :straight t)
		(:file-match "\\.go\\'")
		(:hook lsp-deferred)
		(add-hook 'go-mode-hook (lambda ()
								  (setq tab-width 4)))
		(add-hook 'go-mode-hook #'lsp)
		(add-hook 'before-save-hook 'gofmt-before-save)
		(defun lsp-go-install-save-hooks ()
		  (add-hook 'before-save-hook 'lsp-format-buffer t t)
		  (add-hook 'before-save-hook 'lsp-organize-imports t t))
		(add-hook 'go-mode-hook 'lsp-go-install-save-hooks))

    #+end_src
	
*** TypeScript and JavaScript

Configure TypeScript and JavaScript language modes

#+begin_src emacs-lisp

		(setup (:pkg typescript-mode)
		  :disabled
		  (:file-match "\\.ts\\'"))


		(setup (:pkg js2-mode)
		  (:file-match "\\.jsx?\\'")
		  ;; Use js2-mode for Node scripts
		  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

		  ;; Don't use built-in syntax checking
		  (setq js2-mode-show-strict-warnings nil))


	   (use-package prettier
	     :after (rjsx-mode)
	     :hook (rjsx-mode . prettier-js-mode)
		 :straight (prettier-js :host github :repo "prettier/prettier-emacs")
		 :init
	(setq prettier-js-args '(
	"--trailing-comma" "es5"
	"--bracket-spacing" "true"
	"--use-tabs" "true"
	"--print-width" "100"
	"--single-quote" "true"
  ))
	  )


#+end_src

*** RJSX
#+begin_src emacs-lisp
			(setup (:pkg rjsx-mode :straight t)
			  (:file-match "\\.js\\'")
			  (:hook lsp-deferred)
			  (setq indent-tabs-mode t)
			  (setq js2-basic-offset 4))
#+end_src
*** Yaml
    #+begin_src emacs-lisp
	  ;; yaml-mode doesn't derive from prog-mode, but we can at least enable
	  ;; whitespace-mode and apply cleanup.
	  (setup (:pkg yaml-mode :straight t)
			 (:file-match "\\.ya?ml\\'")
			 (add-hook 'yaml-mode-hook 'whitespace-mode)
			 (add-hook 'yaml-mode-hook 'subword-mode))

    #+end_src

*** Lispy-languages

#+begin_src emacs-lisp

  (setup (:pkg lispy :straight t)
    (:hook-into emacs-lisp-mode scheme-mode lisp-mode))

  (setup (:pkg lispyville :straight t)
    (:hook-into lispy-mode)
    (:when-loaded
      (lispyville-set-key-theme '(operators c-w additional
                                  additional-movement slurp/barf-cp
                                  prettify))))

#+end_src

#+RESULTS:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lispy"
  "emacs-lispyville"

#+end_src

**** Common Lisp

#+begin_src emacs-lisp
  (setup (:pkg common-lisp-mode)
	(:file-match "\\.lisp\\'")
	(:hook lsp-deferred))

  (setup (:pkg sly :straight t)
	(:load-after common-lisp-mode)
	:options
	 (setq sly-lisp-implementations
		   '((sbcl ("/usr/bin/sbcl")))))


#+end_src

#+RESULTS:
| sbcl | (/usr/bin/sbcl) |

**** Emacs Lisp

#+begin_src emacs-lisp

  (setup emacs-lisp-mode
    (:hook flycheck-mode))

  (setup (:pkg helpful :straight t)
    (:option counsel-describe-function-function #'helpful-callable
             counsel-describe-variable-function #'helpful-variable)
    (:global [remap describe-function] helpful-function
             [remap describe-symbol] helpful-symbol
             [remap describe-variable] helpful-variable
             [remap describe-command] helpful-command
             [remap describe-key] helpful-key))

  (bonk/leader-keys
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer"))

  (bonk/leader-keys
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-helpful"

#+end_src

**** Scheme

#+begin_src emacs-lisp

  ;; TODO: This causes issues for some reason.
  ;; :bind (:map geiser-mode-map
  ;;        ("TAB" . completion-at-point))

  (setup (:pkg geiser :straight t)
    ;; (setq geiser-default-implementation 'gambit)
    ;; (setq geiser-active-implementations '(gambit guile))
    ;; (setq geiser-implementations-alist '(((regexp "\\.scm$") gambit)
    ;;                                      ((regexp "\\.sld") gambit)))
    ;; (setq geiser-repl-default-port 44555) ; For Gambit Scheme
    (setq geiser-default-implementation 'guile)
    (setq geiser-active-implementations '(guile))
    (setq geiser-repl-default-port 44555) ; For Gambit Scheme
    (setq geiser-implementations-alist '(((regexp "\\.scm$") guile))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-geiser"

#+end_src

*** C/C++

#+begin_src emacs-lisp

  (setup c-mode
		 (:hook lsp-deferred))

  (setup c++-mode
		 (:hook lsp-deferred))

  (setup (:pkg flycheck-clang-analyzer :straight t)
	(:hook-into flycheck)
	(:when-loaded
	  (progn
	  (flycheck-clang-analyzer-setup))))

  (with-eval-after-load 'company
	(add-hook 'c++-mode-hook 'company-mode)
	(add-hook 'c-mode-hook 'company-mode))

  (setup (:pkg company-irony :straight t)
	(:when-loaded
	  (progn
	(setq company-backends '((
							  company-dabbrev-code
							  company-irony))))))

  (setup (:pkg irony :straight t)
	(:hook-into c++-mode c-mode)
	(:hook irony-cdb-autosetup-compile-options))

#+end_src 

#+RESULTS:
| irony-cdb-autosetup-compile-options |

*** Zig

#+begin_src emacs-lisp

  (setup (:pkg zig-mode :straight t)
    (:disabled)
    (add-to-list 'lsp-language-id-configuration '(zig-mode . "zig"))
    (:load-after lsp-mode
      (lsp-register-client
        (make-lsp-client
          :new-connection (lsp-stdio-connection "~/Projects/Code/zls/zig-cache/bin/zls")
          :major-modes '(zig-mode)
          :server-id 'zls))))

#+end_src

*** Markdown

#+begin_src emacs-lisp

  (setup markdown-mode
    (setq markdown-command "marked")
    (:file-match "\\.md\\'")
    (:when-loaded
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face)))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-markdown-mode"

#+end_src

*** HTML

#+begin_src emacs-lisp

  (setup web-mode
    (:file-match "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (setup (:pkg impatient-mode :straight t))
  (setup (:pkg skewer-mode :straight t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-web-mode"

#+end_src
** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (setup (:pkg rainbow-delimiters :straight t)
	   (:hook-into
		org-mode
		prog-mode))

#+end_src

** Smartparens
#+begin_src emacs-lisp

  (setup (:pkg smartparens :straight t)
    (:hook-into prog-mode))

#+end_src
** Electric indent

#+begin_src emacs-lisp
;; Making electric-indent behave sanely
(setq-default electric-indent-inhibit t)

#+end_src 
* DevOops
** Docker

#+begin_src emacs-lisp

  (setup (:pkg docker :straight t)
    (:also-load docker-tramp))

  (setup (:pkg docker-tramp :straight t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-docker"
  "emacs-docker-tramp"
  "emacs-dockerfile-mode"

#+end_src

** Terraform
#+begin_src emacs-lisp
	  (setup (:pkg terraform-mode :straight t)
			 (:file-match "\\.tf\\'")
			 (:hook-into lsp-deferred))

	  (setup (:pkg company-terraform :straight t))

	  (setup (:pkg terraform-doc :straight t))
#+end_src
* Data-Sci

** Useful packages

Some useful packages to have for datascience are the following:

#+begin_src emacs-lisp

(setup (:pkg csv :straight t))
(setup (:pkg pandoc :straight t))
(setup (:pkg org-preview-html :straight t))
#+end_src 

#+RESULTS:
: t

** ESS (Emacs Speaks Statistics)
#+begin_src emacs-lisp
	; Set up ESS, i.e. Statistics in Emacs, R, Stata, etc.
  (setup (:pkg ess :straight t))
  (setup (:pkg ess-view :straight t))
  (setup (:pkg ess-view-data :straight t))
  (setup (:pkg ess-r-insert-obj :straight t))
(setup (:pkg ess-R-data-view :straight t))
(setup (:pkg ess-smart-underscore :straight t))
#+end_src

#+RESULTS:
: t
** Python
*** ob-Ipython
#+begin_src emacs-lisp
(setup (:pkg ipython-shell-send :straight t))
#+end_src 

*** Anaconda
If you were using Jupyter Lab or Notebook before, there is a good chance you
install it via Anaconda. If not, in a nutshell, it is a package & environment
manager, which specializes in Python & R, but also supports a whole lot of stuff
like Node.js. In my opinion, it is the easiest way to manage multiple Python
installations if you don’t use some advanced package manager like Guix.
#+begin_src emacs-lisp
(setup (:pkg conda :straight t)
  :options
  (setq conda-anaconda-home (expand-file-name "~/Programs/miniconda3/"))
  (setq conda-env-home-directory (expand-file-name "~/Programs/miniconda3/"))
  (setq conda-env-subdirectory "envs"))

(unless (getenv "CONDA_DEFAULT_ENV")
  (conda-env-activate "base"))
#+end_src 

* Terminals
** Vterm
   [[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to
   interact with the underlying terminal applications. This enables it to be much faster
   than =term-mode= and to also provide a more complete terminal emulation experience.
   Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use
   =vterm= because there is a module that will need to be compiled before you can use it
   successfully.

#+begin_src emacs-lisp

  (setup (:pkg vterm :straight t)
		(:when-loaded
	(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
	(setq vterm-max-scrollback 10000)
	;; Once vterm is dead, the vterm buffer is useless. Why keep it around? We can
	;; spawn another if want one.
	(setq vterm-kill-buffer-on-exit t)
	(setq vterm-timer-delay 0.01)))

#+end_src

*** Keybindings for opening vterm in other windows with =SPACE v +options=

#+begin_src emacs-lisp
	(bonk/leader-keys
	  "Vt" '(vterm-other-window :which-key "vterm in new window")
	  "Vb" '(vterm :which-key "open new buffer for vterm"))

#+end_src

** Shell-mode
   TBD (i'm pretty satisfied with vterm, but i could try this one day)
** Eshell

Eshell is a shell-like command interpreter implemented in Emacs Lisp. It invokes no external
processes except for those requested by the user. It is intended to be an alternative to the IELM
(see Emacs Lisp Interaction in The Emacs Editor) REPL for Emacs and with an interface similar to
command shells such as bash, zsh, rc, or 4dos.

~I took daviwil's eshell config and just changed a few details~ I actually like his content a lot and
i use his streams to learn more about emacs.
** Eshell Helpers

#+begin_src emacs-lisp
  (defun read-file (file-path)
	(with-temp-buffer
	  (insert-file-contents file-path)
	  (buffer-string)))

  (defun get-current-package-version ()
	(interactive)
	(let ((package-json-file (concat (eshell/pwd) "/package.json")))
	  (when (file-exists-p package-json-file)
		(let* ((package-json-contents (read-file package-json-file))
			   (package-json (ignore-errors (json-parse-string package-json-contents))))
		  (when package-json
			(ignore-errors (gethash "version" package-json)))))))
  (defun map-line-to-status-char (line)
	(cond ((string-match "^?\\? " line) "?")))

  (defun get-git-status-prompt ()
	(let ((status-lines (cdr (process-lines "git" "status" "--porcelain" "-b"))))
	  (seq-uniq (seq-filter 'identity (mapcar 'map-line-to-status-char status-lines)))))

  (defun get-prompt-path ()
	(let* ((current-path (eshell/pwd))
		   (git-output (shell-command-to-string "git rev-parse --show-toplevel"))
		   (has-path (not (string-match "^fatal" git-output))))
	  (if (not has-path)
		  (abbreviate-file-name current-path)
		(string-remove-prefix (file-name-directory git-output) current-path))))
#+end_src

#+RESULTS:
: get-prompt-path

** Eshell Prompt

#+begin_src emacs-lisp
;; This prompt function mostly replicates my custom zsh prompt setup
;; that is powered by github.com/denysdovhan/spaceship-prompt.
(defun eshell-prompt ()
  (let ((current-branch (magit-get-current-branch))
        (package-version (get-current-package-version)))
    (concat
     "\n"
     (propertize (system-name) 'face `(:foreground "#62aeed"))
     (propertize " at " 'face `(:foreground "black"))
     (propertize (get-prompt-path) 'face `(:foreground "#82cfd3"))
     (when current-branch
       (concat
        (propertize " • " 'face `(:foreground "black"))
        (propertize (concat " " current-branch) 'face `(:foreground "#c475f0"))))
     (when package-version
       (concat
        (propertize " @ " 'face `(:foreground "black"))
        (propertize package-version 'face `(:foreground "#e8a206"))))
     (propertize " • " 'face `(:foreground "black"))
     (propertize (format-time-string "%I:%M:%S %p") 'face `(:foreground "#5a5b7f"))
     (if (= (user-uid) 0)
         (propertize "\n#" 'face `(:foreground "red2"))
       (propertize "\nλ" 'face `(:foreground "#aece4a")))
     (propertize " " 'face `(:inherit (default))))))
#+end_src

#+RESULTS:
: eshell-prompt

** Config

#+begin_src emacs-lisp

  (defun bonks/configure-eshell ()
	;; Make sure magit is loaded
	(require 'magit)

	(require 'evil-collection-eshell)
	(evil-collection-eshell-setup)

	(setup (:pkg xterm-color :straight t))

	(push 'eshell-tramp eshell-modules-list)
	(push 'xterm-color-filter eshell-preoutput-filter-functions)
	(delq 'eshell-handle-ansi-color eshell-output-filter-functions)

	;; Save command history when commands are entered
	(add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

	(add-hook 'eshell-before-prompt-hook
			  (lambda ()
				(setq xterm-color-preserve-properties t)))

	;; Truncate buffer for performance
	(add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

	;; We want to use xterm-256color when running interactive commands
	;; in eshell but not during other times when we might be launching
	;; a shell command to gather its output.
	(add-hook 'eshell-pre-command-hook
			  (lambda () (setenv "TERM" "xterm-256color")))
	(add-hook 'eshell-post-command-hook
			  (lambda () (setenv "TERM" "dumb")))

	;; Use completion-at-point to provide completions in eshell
	(define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)

	;; Initialize the shell history
	(eshell-hist-initialize)

	(evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'consult-history)
	(evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
	(evil-normalize-keymaps)

	(setenv "PAGER" "cat")

	(setq eshell-prompt-function      'eshell-prompt
		  eshell-prompt-regexp        "^λ "
		  eshell-history-size         10000
		  eshell-buffer-maximum-lines 10000
		  eshell-hist-ignoredups t
		  eshell-highlight-prompt t
		  eshell-scroll-to-bottom-on-input t
		  eshell-prefer-lisp-functions nil))

  (use-package eshell
	:hook (eshell-first-time-mode . bonks/configure-eshell)
	:config

	(with-eval-after-load 'esh-opt
	  (setq eshell-destroy-buffer-when-process-dies t)
	  (setq eshell-visual-commands '("htop" "zsh" "vim" "nvim"))))


#+end_src

#+RESULTS:
| bonks/configure-eshell |

** Toggling Eshell

=eshell-toggle= allows me to toggle an Eshell window below the current buffer for the path (or project path) of the buffer.

#+begin_src emacs-lisp

  (setup (:pkg eshell-toggle :straight t)
    (:global "C-M-'" eshell-toggle)
    (:option eshell-toggle-size-fraction 3
             eshell-toggle-use-projectile-root t
             eshell-toggle-run-command nil))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-eshell-toggle"

#+end_src

* File Management
** Backup-files
*** Configuration

I don't like when emacs creates backup files next to the originals, since it can be tedious
to commit changes on a project.

#+begin_src emacs-lisp
;; Backup and Autosave Directories
  (setq temporary-file-directory "~/.tmp/emacs/")
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
  (setq backup-directory-alist            '((".*" . "~/.Trash")))
#+end_src

#+RESULTS:
: ((.* . ~/.Trash))

** Dired
*** Key Bindings

**** Navigation
**** Emacs / Evil
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer=
  after changing configuration (and after filesystem changes!)

**** Marking Files
- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

**** Power Command:
=C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer
editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting Files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs
  
*** Setup

#+begin_src emacs-lisp

	(setup (:pkg all-the-icons-dired :straight t))
	(setup (:pkg dired-single :straight t))
	(setup (:pkg dired-ranger :straight t))
	(setup (:pkg dired-collapse :straight t))
  
	(setup dired
	  (setq dired-listing-switches "-agho --group-directories-first"
			dired-omit-files "^\\.[^.].*"
			dired-omit-verbose nil
			dired-hide-details-hide-symlink-targets nil
			delete-by-moving-to-trash t)

	  (autoload 'dired-omit-mode "dired-x")

	  (add-hook 'dired-load-hook
				(lambda ()
				  (interactive)
				  (dired-collapse)))

	  (add-hook 'dired-mode-hook
				(lambda ()
				  (interactive)
				  (dired-omit-mode 1)
				  (dired-hide-details-mode 1)
				  (all-the-icons-dired-mode 1)
				  (hl-line-mode 1)))

	  (evil-collection-define-key 'normal 'dired-mode-map
		"h" 'dired-single-up-directory
		"H" 'dired-omit-mode
		"l" 'dired-single-buffer
		"y" 'dired-ranger-copy
		"X" 'dired-ranger-move
		"p" 'dired-ranger-paste))

	(setup (:pkg dired-rainbow :straight t)
	  (:load-after dired
	   (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
	   (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
	   (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
	   (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
	   (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
	   (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
	   (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
	   (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
	   (dired-rainbow-define log "#c17d11" ("log"))
	   (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
	   (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
	   (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
	   (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
	   (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
	   (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
	   (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
	   (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
	   (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
	   (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
	   (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")))

  (eval-when-compile (require 'cl))
	 (defun bonk/dired-link (path)
	   (lexical-let ((target path))
		 (lambda () (interactive) (message "Path: %s" target) (dired target))))
	(bonk/leader-keys
	   "d"   '(:ignore t :which-key "dired")
	   "dd"  '(dired :which-key "Here")
	   "dh"  `(,(bonk/dired-link "~/") :which-key "Home")
	   "dn"  `(,(bonk/dired-link "~/Notes") :which-key "Notes")
	   "dw"  `(,(bonk/dired-link "~/working") :which-key "Working")
	   "dg"  `(,(bonk/dired-link "~/github") :which-key "Github")
	   "do"  `(,(bonk/dired-link "~/Downloads") :which-key "Downloads")
	   "dp"  `(,(bonk/dired-link "~/Pictures") :which-key "Pictures")
	   "dv"  `(,(bonk/dired-link "~/Videos") :which-key "Videos")
	   "d."  `(,(bonk/dired-link "~/.config") :which-key "dotfiles-config")
	   "dl"  `(,(bonk/dired-link "~/.local") :which-key "dotfiles-local")
	   "de"  `(,(bonk/dired-link "~/.emacs-modularized") :which-key ".emacs.d"))

#+end_src

#+RESULTS:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-dired-single"
  "emacs-dired-hacks"
  "emacs-all-the-icons-dired"

#+end_src


#+RESULTS:

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (setup (:pkg projectile :straight t)
	(:global "C-c p" projectile-command-map)
	(projectile-mode)
      (setq projectile-project-search-path '("~/." "~/github" "~/working"))
	(setq projectile-switch-project-action #'projectile-dired))

  (setup (:pkg counsel-projectile :straight t)
	(counsel-projectile-mode))

#+end_src

#+RESULTS:
: t
