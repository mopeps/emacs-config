#+title: Bonk-ide
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./../core/bonk-ide.el :mkdirp yes

* Provide

#+begin_src emacs-lisp

  (provide 'bonk-ide)

#+end_src

#+RESULTS:
: bonk-ide

* Development
** General configs

   Here is the config for wether using tabs, how to indent, how many spaces, etc.
*** Prog-mode

***** Commenting Lines
#+begin_src emacs-lisp
(setup (:pkg evil-nerd-commenter :straight t)
  (:global "M-/" evilnc-comment-or-uncomment-lines))
#+end_src

#+RESULTS:
: evilnc-comment-or-uncomment-lines

***** Folding with Origami
#+begin_src emacs-lisp
  (setup (:pkg origami :straight t)
	(:disabled)
	(:hook-into c-mode
				emacs-lisp-mode
				go-mode
				yaml-mode))
#+end_src

#+RESULTS:

***** Infer Indent Style

#+begin_src emacs-lisp

  (defun bonk/infer-indent-style ()
	;; Honestly, This is more of a wild guess since we could be using tabs and having it wrongly
	;; configure on our ide
	(let ((space-count (how-many "^ "))
		  (tab-count (how-many "^\t")))
	  (if (> space-count tab-count )
		  (setq indent-tabs-mode nil))
	  (if (> tab-count space-count)
		  (setq indent-tabs-mode t))))

#+end_src

#+RESULTS:
: bonk/infer-indent-style

***** Configuration
   #+begin_src emacs-lisp
	 (defun bonk/prog-mode-settings ()
	   (setq-default tab-width 4) ; I want tabs to be four spaces wide
	   (setq standard-indent 4) ; I want indent to be four spaces wide
	   (show-paren-mode t)
	   (display-line-numbers-mode)
	   (setq whitespace-line-column nil
			 whitespace-style
			 '(face indentation tabs tab-mark spaces space-mark newline newline-mark
					trailing)
			 whitespace-display-mappings
			 '((tab-mark ?\t [?› ?\t])
			   (newline-mark ?\n [?¬ ?\n])
			   (space-mark ?\  [?·] [?.])))
	   ;; (setq whitespace-display-mappings '(
	   ;; 									   (tab-mark 9 [9474] [46])
	   ;; 									   (space-mark 32 [183] [46])))
	   (setq-local show-trailing-whitespace t)
	   ;; face for Tabs
	   (bonk/infer-indent-style)
	   (whitespace-mode))

	 (add-hook 'prog-mode-hook 'bonk/prog-mode-settings)
	 ;; Indentation levels for each lang
	 (defvaralias 'js2-basic-offset 'tabwidth)
	 (defvaralias 'js-indent-level 'tab-width)
	 (defvaralias 'js-indent-level 'tab-width)
	 (defvaralias 'rjsx-indent-level 'tab-width)
	 (defvaralias 'rjsx-mode-markup-indent-offset 'tab-width)
	 (defvaralias 'rjsx-mode-code-indent-offset 'tab-width)
	 (defvaralias 'web-mode-css-indent-offset 'tab-width)
	 (defvaralias 'js2-indent-level 'tab-width)

	 ;; Increase for better lsp-mode performance; see
	 ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
	 (when (boundp 'read-process-output-max)
	   ;; New in Emacs 27
	   (setq read-process-output-max (* 2048 2048))
	   (load-file "~/magit.el"))
   #+end_src

   #+RESULTS:
   : t

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (setup (:pkg company :straight t)
	(:hook-into prog-mode)
		 (:bind
		  "<tab>" company-complete-selection
		  "<tab>" company-indent-or-complete-common)
		 (setq company-lsp-cache-candidates 'auto)
		 (setq company-minimum-prefix-length 1)
		 (setq company-idle-delay 0.25)
		 (setq company-auto-complete nil)
		 (setq company-global-modes '(not org-mode eshell-mode))
		 (setq company-tooltip-minimum-width 60))

  (global-company-mode t)
  (setup (:pkg all-the-icons-completion :straight t))


#+end_src

#+RESULTS:
: t

*** Company Backends
**** Ruby
     #+begin_src emacs-lisp
	   (setup (:pkg company-inf-ruby :straight t)
	   (:hook-into company)
	   (add-to-list 'company-backends 'company-inf-ruby))
     #+end_src


	 #+RESULTS:
	 | company-robe | company-inf-ruby | company-bbdb | company-semantic | company-cmake | company-capf | company-clang | company-files | (company-dabbrev-code company-gtags company-etags company-keywords) | company-oddmuse | company-dabbrev |
	 
** Languages
*** LSP
**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp


  (defun bonk/lsp-mode-setup ()
	  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	  (lsp-headerline-breadcrumb-mode))

  (setup (:pkg lsp-mode :straight t)
	(:disabled)
		   (:hook bonk/lsp-mode-setup )
		   (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
		   (:option lsp-enable-which-key-integration t)
		   (setq lsp-completion-enable t)
		   (:when-loaded
		  (progn
			  (setq lsp-language-id-configuration '((java-mode . "java")
												  (kotlin-mode . "kotlin")
												  (python-mode . "python")
												  (gfm-view-mode . "markdown")
												  (css-mode . "css")
												  (xml-mode . "xml")
												  (c-mode . "c")
												  (dart-mode . "dart")
												  (c++-mode . "cpp")
												  ;; (rustic-mode . "rust")
												  (objc-mode . "objective-c")
												  (web-mode . "html")
												  (html-mode . "html")
												  (sgml-mode . "html")
												  (mhtml-mode . "html")
												  (go-mode . "go")
												  (haskell-mode . "haskell")
												  (php-mode . "php")
												  (json-mode . "json")
												  (tsx-ts-mode . "typescript")
												  (rjsx-mode . "javascript")
												  ))

			  (setq lsp-diagnostics-provider :none)

			  (:option lsp-file-watch-threshold nil)
			  (:option lsp-solargraph-multi-root nil)
			  ;; enable / disable the hints as you prefer: (setq lsp-auto-guess-root t)
  (setq lsp-log-io nil)
  (setq lsp-restart 'auto-restart)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-signature-render-documentation nil)
  (setq lsp-eldoc-hook nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-semantic-tokens-enable nil)
  (setq lsp-enable-folding nil)
  (setq lsp-enable-imenu nil)
  (setq lsp-enable-snippet nil)
  (setq read-process-output-max (* 1024 1024)) ;; 1MB
  (setq lsp-idle-delay 0.5)
			  )))
#+end_src

#+RESULTS:

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more
like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning
of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (setup (:pkg lsp-ui :straight t)
	(:disabled)
		 (:hook-into lsp-mode)
		 (:when-loaded
		  (progn
			(setq lsp-ui-sideline-enable t)
			(setq lsp-ui-sideline-show-hover nil)
			(setq lsp-ui-doc-enable t)
			(setq lsp-ui-doc-position 'bottom))))

#+end_src

#+RESULTS:

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (setup (:pkg lsp-ivy :straight t)
	(:disabled)
	(:load-after lsp-mode))

#+end_src

#+RESULTS:

*** Eglot
#+begin_src emacs-lisp
  		(setup (:pkg jsonrpc :straight t))
            (setup (:pkg consult-eglot :straight t)
              (:when-loaded
              	(progn
              	  (map! map eglot-mode-map [remap xref-find-definitions] #'consult-eglot-symbols))
              	))
            (setup (:pkg flycheck-eglot :straight t)
  (:disabled)
  )
            (setup (:pkg eglot :straight t)
              :ensure t
              :commands (eglot-ensure)
              :options
              (setq eglot-sync-connect 1)
              (setq eglot-connect-timeout 10)
              (setq eglot-autoshutdown t)
              (setq eglot-send-changes-idle-time 0.8)
              (setq eglot-auto-display-help-buffer nil)
              )
            ;;  hooks
            (defun bonk-ide--add-eglot-hooks (mode-list)
              "Iterates over MODE-LIST recursively to add eglot-ensure to
              		existing mode hooks.

              		The mode must be loaded, ie. found with `fboundp'. A mode which
              		is not loaded will not have a hook added, in which case add it
              		manually with something like this:

              		`(add-hook 'some-mode-hook #'eglot-ensure)'
              		"
              (dolist (mode-def mode-list)
              	(let ((mode (if (listp mode-def) (car mode-def) mode-def)))
              	  (cond
              	   ((listp mode) (bonk-ide--add-eglot-hooks mode))
              	   (t
              		(when (and (fboundp mode)
              				   (not (eq 'clojure-mode mode))  ; prefer cider
              				   (not (eq 'lisp-mode mode))     ; prefer sly/slime
              				   (not (eq 'scheme-mode mode))   ; prefer geiser
              				   )
              		  (let ((hook-name (concat (symbol-name mode) "-hook")))
              			(message (concat "adding eglot to " hook-name))
              			(add-hook (intern hook-name) #'eglot-ensure))))))))

            ;; add eglot to existing programming modes when eglot is loaded.
            (with-eval-after-load "eglot"
              (bonk-ide--add-eglot-hooks eglot-server-programs)

              (add-to-list 'eglot-server-programs
              			   '((ruby-mode) "solargraph" "stdio"))
            			 (add-to-list 'eglot-server-programs
            						  '(
          ((c-mode c++-mode)
            							. ("clangd"
            							   "-j=10"
            							   "--log=error"
            							   "--malloc-trim"
            							   "--background-index"
            							   "--clang-tidy"
            							   "--cross-file-rename"
            							   "--completion-style=detailed"
            							   "--pch-storage=memory"
            							   "--header-insertion=never"
            							   "--header-insertion-decorators=0"))
    ((tsx-ts-mode) . ("typescript-language-server" "--stdio"))
    )
      )
        )
            	;; (add-to-list 'eglot-server-programs '(tsx-ts-mode) ("typescript-language-server" "--stdio"))
              		;;; customization
            ;; Shutdown server when last managed buffer is killed
            (customize-set-variable 'eglot-autoshutdown t)
            	(customize-set-variable 'eglot-extend-to-xref t)
            (customize-set-variable 'eglot-send t)
              (customize-set-variable 'eglot-ignored-server-capabilities
          		(quote (:documentFormattingProvider :documentRangeFormattingProvider)))

#+end_src

#+RESULTS:
| :documentFormattingProvider | :documentRangeFormattingProvider |

*** Treesitter
#+begin_src emacs-lisp
	(setup (:pkg tree-sitter :straight t)
	  (:hook tree-sitter-hl-mode)
	  (:hook-into tsx-ts-mode))
	(setup (:pkg tree-sitter-langs :straight t))
#+end_src

#+RESULTS:

*** Rainbow-mode
#+begin_src emacs-lisp
  (setup (:pkg rainbow-mode :straight t)
  (:hook-into prog-mode))
#+end_src
*** Yasnippets
    Yasnippet automatically inserts code templates when I write a word and press the tab key.
    It predefines most of the common templates, including the dreadful =if err !\=nil { ....=

    #+begin_src emacs-lisp

			  (setup (:pkg yasnippet :straight t)                  ; Snippets
				(yas-global-mode 1))

				(with-eval-after-load 'yasnippet
				 (setq yas-snippt-dirs '(yasnippet-snippets-dir))
				(setq
				 yas-verbosity 1                      ; No need to be so verbose
				 yas-wrap-around-region t)
				(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
				(yas-reload-all))


			  (setup (:pkg yasnippet-snippets :straight t)         ; Collection of snippets
				(:load-after yasnippet))
    #+end_src

	#+RESULTS:
	: yasnippet-snippets

*** Flycheck

    Flycheck is one of the two main packages for code checks in the background. The
    other one is Flymake. I use Flycheck because it allows me to define a custom “advanced”
    checker.
    #+begin_src emacs-lisp

	  (setup (:pkg flycheck :straight t)
		(:hook-into company-mode )
		(setq flycheck-check-syntax-automatically `(idle-change mode-enabled))
		(setq flycheck-idle-change-delay 4)
		(setq flycheck-disabled-checkers
			  '(ruby ruby-reek
					 ruby-standard
					 ;; ruby-rubocop
					 ruby-rubylint
					 yaml-ruby)))

	#+end_src

	#+RESULTS:
	| ruby | ruby-reek | ruby-standard | ruby-rubylint | yaml-ruby |

*** Python
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)

  (with-eval-after-load 'company
	(add-hook 'python-mode-hook 'company-mode))

  (setup (:pkg company-jedi :straight t)
	(:when-loaded
	  (progn
		(add-to-list 'company-backends 'company-jedi))))

  (defun python-mode-company-init ()
	(setq-local company-backends '((company-jedi
									company-etags
									company-dabbrev-code))))
  (setup (:pkg python-mode :straight t)
	(:hook tree-sitter-mode)
	(:hook eglot-ensure)
	:config

  (set-docsets! '(python-mode inferior-python-mode) "Python 3" "NumPy" "SciPy" "Pandas")
	(set-ligatures! 'python-mode
					;; Functional
					:def "def"
					:lambda "lambda"
					;; Types
					:null "None"
					:true "True" :false "False"
					:int "int" :str "str"
					:float "float"
					:bool "bool"
					:tuple "tuple"
					;; Flow
					:not "not"
					:in "in" :not-in "not in"
					:and "and" :or "or"
					:for "for"
					:return "return" :yield "yield")
	(:when-loaded
	  (progn
		(setq indent-tabs-mode nil)
		(setq python-indent-guess-indent-offset t)
		)))

  (with-eval-after-load 'python-mode
	(lambda () (require 'lsp-pyright)))
  (setup (:pkg lsp-pyright :straight t)
	(:when-loaded
	  (progn
		(when (executable-find "python3")
		  (setq lsp-pyright-python-executable-cmd "python3")))))
  (setup (:pkg pyenv :straight t)
	(:load-after python-mode))

#+end_src

#+RESULTS:

*** Ruby
**** ruby-mode
     #+begin_src emacs-lisp
	   (setup ruby-mode
		(:file-match "\\.rb\\'")
		(:hook eglot-ensure)
		(:hook tree-sitter-mode)
		(setq ruby-indent-level 2)
		 (setq ruby-indent-tabs-mode nil)
		 )


     #+end_src

	 #+RESULTS:

**** robe-mode
     #+begin_src emacs-lisp
					 (setup (:pkg robe-mode :straight t)
					   (:hook-into ruby-mode))
					 (eval-after-load 'company
					   '(push 'company-robe company-backends))
     #+end_src

     #+RESULTS:

**** rspec-mode
     #+begin_src emacs-lisp
			  (setup (:pkg rspec-mode :straight t)
				(:hook-into ruby-mode))
     #+end_src

     #+RESULTS:
     : t

*** Golang
    
    #+begin_src emacs-lisp
			(setup (:pkg go-mode :straight t)
			  (:file-match "\\.go\\'")
			  (:hook tree-sitter-mode)
			  (:hook eglot-ensure)
			  (add-hook 'go-mode-hook (lambda ()
										(setq tab-width 4)))
			  (add-hook 'go-mode-hook #'lsp)
			  (add-hook 'before-save-hook 'gofmt-before-save)
			  (defun lsp-go-install-save-hooks ()
				(add-hook 'before-save-hook 'lsp-format-buffer t t)
				(add-hook 'before-save-hook 'lsp-organize-imports t t))
			  (add-hook 'go-mode-hook 'lsp-go-install-save-hooks))

    #+end_src

	#+RESULTS:
	| tree-sitter-mode | doom-modeline-env-setup-go | lsp-go-install-save-hooks | lsp | (lambda nil (setq tab-width 4)) | eglot-ensure |
	
	
*** RJSX
#+begin_src emacs-lisp
  (setup (:pkg rjsx-mode :straight t)
	(:disabled)
	  (:file-match "\\.js\\' \\.jsx?\\' \\.tsx\\'")
	  (:hook tree-sitter-hl-mode)
	  (setq indent-tabs-mode 0)
	  (setq js2-basic-offset 2))

  (setup (:pkg prettier-js))
#+end_src

#+RESULTS:
| emacs-vhdl-mode | emacs-tsx-ts-mode | emacs-prettier-js | emacs-org-present | emacs-guix |

*** TypeScript and JavaScript

Configure TypeScript and JavaScript language modes

#+begin_src emacs-lisp

	(setup (:pkg tsx-ts-mode)
	  (:hook eglot-ensure)
	  (:hook tide-setup)
	  (tree-sitter-require 'tsx)
	  (add-to-list
	   'tree-sitter-major-mode-language-alist
	   '(tsx-ts-mode . tsx))
	  (:hook tree-sitter-hl-mode)
	  (:hook tide-hl-identifier-mode)
	  )

  (setup (:pkg typescript-mode :straight t)
	(:hook tsx-ts-mode) ;; Completely hacky, feels dirty
	)

	(setup (:pkg tide :straight t)
	  (setq flycheck-check-syntax-automatically '(save mode-enabled))
	  (:load-after tsx-ts-mode company-mode flycheck-mode))

	(setup (:pkg js2-mode :straight t)
	  ;; Use js2-mode for Node scripts
	  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

	  ;; Don't use built-in syntax checking
	  (setq js2-mode-show-strict-warnings nil))



#+end_src

#+RESULTS:

*** Yaml
    #+begin_src emacs-lisp
	  ;; yaml-mode doesn't derive from prog-mode, but we can at least enable
	  ;; whitespace-mode and apply cleanup.
	  (setup (:pkg yaml-mode :straight t)
			 (:file-match "\\.ya?ml\\'")
			 (add-hook 'yaml-mode-hook 'whitespace-mode)
			 (add-hook 'yaml-mode-hook 'subword-mode))

    #+end_src

*** Lispy-languages

#+begin_src emacs-lisp

  (setup (:pkg lispy :straight t)
    (:hook-into emacs-lisp-mode scheme-mode lisp-mode))

  (setup (:pkg lispyville :straight t)
    (:hook-into lispy-mode)
    (:when-loaded
      (lispyville-set-key-theme '(operators c-w additional
                                  additional-movement slurp/barf-cp
                                  prettify))))

#+end_src

#+RESULTS:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-lispy"
  "emacs-lispyville"

#+end_src

**** Common Lisp

#+begin_src emacs-lisp
  (setup common-lisp-mode
	(:file-match "\\.lisp\\'")
	(:hook eglot-ensure))

  (setup (:pkg sly :straight t)
	(:load-after common-lisp-mode)
	:options
	 (setq sly-lisp-implementations
		   '((sbcl ("/usr/bin/sbcl")))))


#+end_src

#+RESULTS:
| sbcl | (/usr/bin/sbcl) |

**** Emacs Lisp

#+begin_src emacs-lisp

	(setup emacs-lisp-mode
	  (:hook flycheck-mode)
	  (:hook eglot-ensure)
	  )
	(setup (:pkg json-rpc :straight t))
	(setup (:pkg json-rpc-server :straight t)
	  :ensure t)

	(setup (:pkg helpful :straight t)
	  (:option counsel-describe-function-function #'helpful-callable
			   counsel-describe-variable-function #'helpful-variable)
	  (:global [remap describe-function] helpful-function
			   [remap describe-symbol] helpful-symbol
			   [remap describe-variable] helpful-variable
			   [remap describe-command] helpful-command
			   [remap describe-key] helpful-key))

	(bonk/set-leader-keys
	  "e"   '(:ignore t :which-key "eval")
	  "eb"  '(eval-buffer :which-key "eval buffer"))

	(bonk/set-leader-keys
	  :keymaps '(visual)
	  "er" '(eval-region :which-key "eval region"))

#+end_src

#+RESULTS:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-helpful"

#+end_src


**** Scheme

#+begin_src emacs-lisp

  ;; TODO: This causes issues for some reason.
  ;; :bind (:map geiser-mode-map
  ;;        ("TAB" . completion-at-point))

  (setup scheme-mode
	(:hook geiser-mode)
	(:hook tree-sitter-mode))
  (setup (:pkg geiser :straight t)
	;; (setq geiser-default-implementation 'gambit)
	;; (setq geiser-active-implementations '(gambit guile))
	;; (setq geiser-implementations-alist '(((regexp "\\.scm$") gambit)
	;;                                      ((regexp "\\.sld") gambit)))
	;; (setq geiser-repl-default-port 44555) ; For Gambit Scheme
	(setq geiser-default-implementation 'guile)
	(setq geiser-active-implementations '(guile))
	(setq geiser-repl-default-port 44555) ; For Gambit Scheme
	(setq geiser-implementations-alist '(((regexp "\\.scm$") guile))))

#+end_src

#+RESULTS:
| (regexp \.scm$) | guile |

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-geiser"

#+end_src


I was going to put clojure here, but you see, it runs on the JVM, so...

*** JVM-Langs
Apparently James Gosling used and likes Emacs (nice)
**** Java

#+begin_src emacs-lisp
  (setup (:pkg lsp-java :straight t)
	(:disabled)
	(:hook-into lsp-mode))
  (setup java-mode
	(:hook tree-sitter-hl-mode)
	(:hook copilot-mode)
	(:hook eglot-ensure))
#+end_src

#+RESULTS:
| eglot-ensure |

**** Clojure
#+begin_src emacs-lisp
  (setup (:pkg clojure-mode :straight t)
		(:hook copilot-mode)
		(:hook tree-sitter-hl-mode))
  (setup (:pkg cider :straight t)
	(:when-loaded
	  (progn
		;; eldoc in cider mode
		(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
		(add-hook 'cider-mode-hook '(paredit-mode +1))
		(with-eval-after-load 'evil
		  (defun my-evil-cider-repl-insert ()
			"Enter insert mode at the prompt, If we 're behind the prompt."
			(interactive)
			(if (> cider-repl-input-start-mark (point))
				(goto-char cider-repl-input-start-mark))
			(evil-insert-state))
		  ))))

#+end_src

#+RESULTS:

**** Kotlin
#+begin_src emacs-lisp
  (setup (:pkg kotlin-mode :straight t)
	(:hook tree-sitter-hl-mode)
	(:hook copilot-mode)
	(:hook eglot-ensure)
	)
#+end_src

**** Graddle
#+begin_src emacs-lisp
  (setup (:pkg gradle-mode :straight t))
#+end_src

#+RESULTS:
: t

*** C/C++

#+begin_src emacs-lisp

  (setup c-mode
  		(:hook tree-sitter-mode)
  	;; (:hook copilot-mode)
  		 (:hook eglot-ensure))

  (setup c++-mode
  		(:hook tree-sitter-mode)
  	;; (:hook copilot-mode)
  		 (:hook eglot-ensure))

  ;; (setup (:pkg flycheck-clang-analyzer :straight t)
  ;; (:disabled)
  ;; 	(:hook-into flycheck)
  ;; 	(:when-loaded
  	  ;; (progn
  	  ;; (flycheck-clang-analyzer-setup))))

  (with-eval-after-load 'company
  	(add-hook 'c++-mode-hook 'company-mode)
  	(add-hook 'c-mode-hook 'company-mode))

  (setup (:pkg company-irony :straight t)
  	(:when-loaded
  	  (progn
  	(setq company-backends '((
  							  company-dabbrev-code
  							  company-irony))))))

  (setup (:pkg irony :straight t)
  	(:hook-into c++-mode c-mode)
  	(:hook irony-cdb-autosetup-compile-options))

#+end_src 

#+RESULTS:
| irony-cdb-autosetup-compile-options |

*** Verilog / FPGA
#+begin_src emacs-lisp
  (setup (:pkg verilog-mode :straight t))

  (defvar vhdl-ext-eglot-default-server 've-rust-hdl)

  (defconst vhdl-ext-lsp-available-servers
	'((ve-hdl-checker . ("hdl_checker" "--lsp"))
	  (ve-rust-hdl    . "vhdl_ls")
	  (ve-ghdl-ls     . "ghdl-ls")
	  (ve-vhdl-tool   . ("vhdl-tool" "lsp")))
	"Vhdl-ext available LSP servers.")
  (defconst vhdl-ext-lsp-server-ids
	(mapcar #'car vhdl-ext-lsp-available-servers))
  (defconst my-vhdl-style
	'((vhdl-tab-always-indent        . t)
	  (vhdl-comment-only-line-offset . 4)
	  (vhdl-offsets-alist            . ((arglist-close    . vhdl-lineup-arglist)
										(statement-cont   . 0)
										(case-alternative . 4)
										(block-open       . 0)))
	  (vhdl-echo-syntactic-information-p . t)
	  )
	"My VHDL Programming Style")

  (defun vhdl-ext-eglot-set-server (server-id)
	"Configure VHDL for `eglot' for selected SERVER-ID.
	Override any previous configuration for `vhdl-mode' and `vhdl-ts-mode'."
	(interactive (list (intern (completing-read "Server-id: " vhdl-ext-lsp-server-ids nil t))))
	(let ((cmd (alist-get server-id vhdl-ext-lsp-available-servers)))
	  (unless cmd
		(error "%s not recognized as a supported server" server-id))
	  (if (not (executable-find (if (listp cmd)
									(car cmd)
								  cmd)))
		  (message "%s not in $PATH, skipping config..." server-id)
		;; Else configure available server
		(dolist (mode '(vhdl-mode vhdl-ts-mode))
		  (setq eglot-server-programs (assq-delete-all mode eglot-server-programs))
		  (if (listp cmd)
			  (push (append (list mode) cmd) eglot-server-programs)
			(push (list mode cmd) eglot-server-programs)))
		(message "Set eglot VHDL server: %s" server-id))))
  (defun bonk-vhdl-mode-hook ()
	;; offset customizations not in my-vhdl-style
	(vhdl-set-offset 'statement-case-intro '++)
	;; other customizations
	(setq tab-width 4
		  ;; this will make sure spaces are used instead of tabs
		  indent-tabs-mode nil)
	(setq line-numbers-mode t)
	;; keybindings for VHDL are put in vhdl-mode-map

	(vhdl-ext-eglot-set-server vhdl-ext-eglot-default-server)
	(define-key vhdl-mode-map "\C-m" 'newline-and-indent)

	)


  (setup (:pkg vhdl-tools :straight t)
	(:hook-into vhdl-mode)
	(:hook whitespace-mode)
	(:hook display-line-numbers-mode)
	(:hook bonk-vhdl-mode-hook)
	;; (:hook eglot-ensure)
	)

#+end_src

#+RESULTS:
| eglot-ensure | bonk-vhdl-mode-hook | display-line-numbers-mode | whitespace-mode |

*** Zig

#+begin_src emacs-lisp

  (setup (:pkg zig-mode :straight t)
	(:hook eglot-ensure)
	:config
	(setq zig-format-on-save nil) ; rely on :editor format instead
	(add-hook 'zig-mode-local-vars-hook #'tree-sitter! 'append)
	(flycheck-define-checker zig
	  "A zig syntax checker using zig's `ast-check` command."
	  :command ("zig" "ast-check" (eval (buffer-file-name)))
	  :error-patterns
	  ((error line-start (file-name) ":" line ":" column ": error: " (message) line-end))
	  :modes zig-mode)
	(add-to-list 'flycheck-checkers 'zig)
	)

#+end_src

#+RESULTS:
| zig | tsx-tide | typescript-tide | ada-gnat | asciidoctor | asciidoc | awk-gawk | bazel-build-buildifier | bazel-module-buildifier | bazel-starlark-buildifier | bazel-workspace-buildifier | c/c++-clang | c/c++-gcc | c/c++-cppcheck | cfengine | chef-foodcritic | coffee | coffee-coffeelint | coq | css-csslint | css-stylelint | cuda-nvcc | cwl | d-dmd | dockerfile-hadolint | elixir-credo | emacs-lisp | emacs-lisp-checkdoc | ember-template | erlang-rebar3 | erlang | eruby-erubis | eruby-ruumba | fortran-gfortran | go-gofmt | go-golint | go-vet | go-build | go-test | go-errcheck | go-unconvert | go-staticcheck | groovy | haml | handlebars | haskell-stack-ghc | haskell-ghc | haskell-hlint | html-tidy | javascript-eslint | javascript-jshint | javascript-standard | json-jsonlint | json-python-json | json-jq | jsonnet | less | less-stylelint | llvm-llc | lua-luacheck | lua | markdown-markdownlint-cli | markdown-mdl | nix | nix-linter | opam | perl | perl-perlcritic | php | php-phpmd | php-phpcs | processing | proselint | protobuf-protoc | protobuf-prototool | pug | puppet-parser | puppet-lint | python-flake8 | python-pylint | python-pycompile | python-pyright | python-mypy | r-lintr | racket | rpm-rpmlint | rst-sphinx | rst | ruby-rubocop | ruby-standard | ruby-reek | ruby-rubylint | ruby | ruby-jruby | rust-cargo | rust | rust-clippy | scala | scala-scalastyle | scheme-chicken | scss-lint | scss-stylelint | sass/scss-sass-lint | sass | scss | sh-bash | sh-posix-dash | sh-posix-bash | sh-zsh | sh-shellcheck | slim | slim-lint | sql-sqlint | systemd-analyze | tcl-nagelfar | terraform | terraform-tflint | tex-chktex | tex-lacheck | texinfo | textlint | typescript-tslint | verilog-verilator | vhdl-ghdl | xml-xmlstarlet | xml-xmllint | yaml-jsyaml | yaml-ruby | yaml-yamllint | javascript-tide | jsx-tide |

*** Rust
**** Rustic
rustic is an extension of rust-mode which adds a number of useful features (see the its github readme) to it. It is the core of the setup and you can use just it without any other Emacs packages (and without rust-analyzer) if you just want code highlighting, compilation and cargo commands bound to emacs shortcuts, and a few other features.
#+begin_src emacs-lisp

  (after! projectile
	(add-to-list 'projectile-project-root-files "Cargo.toml"))
	(setup (:pkg rustic :straight t)
	  (:hook copilot-mode)
	  (:hook tree-sitter-mode)
	  (:with-map rustic-mode-map
		(:bind "C-c C-c l"  flycheck-list-errors
			   ))
	  :config
	  (setq rustic-rustfmt-config-alist '((edition . "2018")))
	  (setq rustic-lsp-client 'eglot)
	  (setq rust-prettify-symbols-alist nil)
	  (setq rustic-indent-method-chain t)
	  (after! rustic-flycheck
			  (add-to-list 'flycheck-checkers 'rustic-clippy))
	  (setq rustic-format-on-save t))

#+end_src

#+RESULTS:
: t

*** Markdown

#+begin_src emacs-lisp

  (setup (:pkg markdown-mode :straight t)
    (setq markdown-command "marked")
    (:file-match "\\.md\\'")
    (:when-loaded
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face)))))

#+end_src

#+RESULTS:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-markdown-mode"

#+end_src

*** HTML

#+begin_src emacs-lisp

  (setup web-mode
    (:file-match "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (setup (:pkg impatient-mode :straight t))
  (setup (:pkg skewer-mode :straight t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-web-mode"

#+end_src
*** Dart
#+begin_src emacs-lisp
  (setup (:pkg dart-mode :straight t)
		(:hook tree-sitter-hl-mode)
		(:hook copilot-mode)
		)
  (use-package lsp-dart
	:straight t
	:ensure t
	:hook (dart-mode . lsp))
#+end_src

#+RESULTS:
| copilot-mode | tree-sitter-hl-mode | lsp |

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (setup (:pkg rainbow-delimiters :straight t)
	   (:hook-into
		org-mode
		prog-mode))

#+end_src

** Smartparens
#+begin_src emacs-lisp

  (setup (:pkg smartparens :straight t)
    (:hook-into prog-mode))

#+end_src
** Electric indent

#+begin_src emacs-lisp
;; Making electric-indent behave sanely
(setq-default electric-indent-inhibit t)

#+end_src 
** Copilot
#+begin_src emacs-lisp
	 (use-package copilot
	   :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
	   :ensure t)
	 ;; you can utilize :map :hook and :config to customize copilot
   (define-key copilot-completion-map (kbd "C-c i") 'copilot-accept-completion)
   (define-key copilot-completion-map (kbd "C-c j") 'copilot-next-completion)
   (define-key copilot-completion-map (kbd "C-c k") 'copilot-previous-completion)
  
#+end_src

#+RESULTS:
: copilot-previous-completion

* Debugging
#+begin_src emacs-lisp

  (setup (:pkg dap-mode :straight t)
	(:disabled)
	;; Assuming that `dap-debug' will invoke all this
	(:when-loaded
	  (setq dap-auto-configure-features '(sessions locals controls tooltip))))

  (defvar +debugger--realgud-alist
	'((realgud:bashdb    :modes (sh-mode))
	  (realgud:gdb)
	  (realgud:gub       :modes (go-mode))
	  (realgud:kshdb     :modes (sh-mode))
	  (realgud:pdb       :modes (python-mode))
	  (realgud:perldb    :modes (perl-mode perl6-mode))
	  (realgud:rdebug    :modes (ruby-mode))
	  (realgud:remake)
	  (realgud:trepan    :modes (perl-mode perl6-mode))
	  (realgud:trepan2   :modes (python-mode))
	  (realgud:trepan3k  :modes (python-mode))
	  (realgud:trepanjs  :modes (javascript-mode js2-mode js3-mode))
	  (realgud:trepanpl  :modes (perl-mode perl6-mode raku-mode))
	  (realgud:zshdb     :modes (sh-mode))))
  ;; TODO Setup realgud

#+end_src

#+RESULTS:

* DevOops
** Docker

#+begin_src emacs-lisp

  (setup (:pkg docker :straight t)
		 (:hook tree-sitter-mode)
    (:also-load docker-tramp))

  (setup (:pkg docker-tramp :straight t))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-docker"
  "emacs-docker-tramp"
  "emacs-dockerfile-mode"

#+end_src

** Terraform
#+begin_src emacs-lisp
  (setup (:pkg terraform-mode :straight t)
		 (:file-match "\\.tf\\'")
		 (:hook tree-sitter-mode)
		(:hook eglot-ensure))

  (setup (:pkg company-terraform :straight t))

  (setup (:pkg terraform-doc :straight t))
#+end_src
* Data-Sci

** Useful packages

Some useful packages to have for datascience are the following:

#+begin_src emacs-lisp

(setup (:pkg csv :straight t))
(setup (:pkg pandoc :straight t))
(setup (:pkg org-preview-html :straight t))
#+end_src 

#+RESULTS:
: t

** ESS (Emacs Speaks Statistics)
#+begin_src emacs-lisp
	  ; Set up ESS, i.e. Statistics in Emacs, R, Stata, etc.
	(setup (:pkg ess :straight t)
	  :defer t
		(:hook tree-sitter-mode)
	  )
	(setup (:pkg ess-view :straight t)
	  :defer t)
	(setup (:pkg ess-view-data :straight t)
	  :defer t)
	(setup (:pkg ess-r-insert-obj :straight t)
	  :defer t)
  (setup (:pkg ess-R-data-view :straight t)
	:defer t)
  (setup (:pkg ess-smart-underscore :straight t)
	:defer t)
#+end_src

#+RESULTS:
: t
** Python
*** DONE ob-Ipython / EIN
#+begin_src emacs-lisp
  (setup (:pkg ein :straight t)
	(:hook eglot-ensure)
	(:hook tree-sitter-mode)
	)
  (setup (:pkg math-preview :straight t))
  (setup (:pkg ipython-shell-send :straight t))
#+end_src 

#+RESULTS:
: t

*** Anaconda
If you were using Jupyter Lab or Notebook before, there is a good chance you
install it via Anaconda. If not, in a nutshell, it is a package & environment
manager, which specializes in Python & R, but also supports a whole lot of stuff
like Node.js. In my opinion, it is the easiest way to manage multiple Python
installations if you don’t use some advanced package manager like Guix.
#+begin_src emacs-lisp
(setup (:pkg conda :straight t)
  :options
  (setq conda-anaconda-home (expand-file-name "~/anaconda3/"))
  (setq conda-env-home-directory (expand-file-name "~/anaconda3/"))
  (setq conda-env-subdirectory "envs"))

(unless (getenv "CONDA_DEFAULT_ENV")
  (conda-env-activate "base"))
#+end_src 

#+RESULTS:


* Ebuilds
#+begin_src emacs-lisp
(setup (:pkg ebuild-mode :straight t))
#+end_src

#+RESULTS:
: t
