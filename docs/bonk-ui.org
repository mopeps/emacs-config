#+title: Bonk-UI
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./../core/bonk-ui.el :mkdirp yes

* Provide

#+begin_src emacs-lisp

  (provide 'bonk-ui)

#+end_src

* Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp

  (setup (:pkg command-log-mode :straight t)
	(command-log-mode 1))

#+end_src

#+RESULTS:

* Color Theme
* Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

	(setup (:pkg all-the-icons :straight t))

	  (setup (:pkg minions :straight t)
		(:hook-into doom-modeline-mode))

	  (setup (:pkg doom-modeline :straight t)
		(:hook-into after-init-hook)
		(:option doom-modeline-height 15
				 doom-modeline-bar-width 4
				 doom-modeline-lsp t
				 doom-modeline-github nil
				 doom-modeline-mu4e nil
				 doom-modeline-irc t
				 doom-modeline-minor-modes t
				 doom-modeline-modal-icon t
				 doom-modeline-persp-name nil
				 doom-modeline-buffer-file-name-style 'truncate-except-project
				 doom-modeline-major-mode-icon nil)
		(setq all-the-icons-scale-factor 0.9)
		(custom-set-faces '(mode-line ((t (:height 0.85, :family "Fira Code"))))
						  '(mode-line-inactive ((t (:height 0.85, :family "Fira Code"))))))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-doom-modeline"
  "emacs-all-the-icons"
  "emacs-minions"

#+end_src

* Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (setup (:pkg ivy-rich :straight t)
      (ivy-rich-mode 1))

    (setup (:pkg counsel :straight t)
      (:global "C-M-j"  counsel-switch-buffer
              "C-r"  counsel-minibuffer-history)
      (counsel-mode 1))

#+end_src

#+RESULTS:
: counsel-minibuffer-history

* Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
	:commands (helpful-callable helpful-variable helpful-command helpful-key)
	:custom
	(counsel-describe-function-function #'helpful-callable)
	(counsel-describe-variable-function #'helpful-variable)
	:bind
	([remap describe-function] . counsel-describe-function)
	([remap describe-command] . helpful-command)
	([remap describe-variable] . counsel-describe-variable)
	([remap describe-key] . helpful-key))

#+end_src

#+RESULTS:
: helpful-key

* Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

	  (use-package hydra
		:defer t)

	  (defhydra hydra-text-scale (:timeout 4)
		"scale text"
		("j" text-scale-increase "in")
		("k" text-scale-decrease "out")
		("f" nil "finished" :exit t))

	(bonk/set-leader-keys
		"ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

#+RESULTS:

* Ido (tool for buffer)
   #+begin_src emacs-lisp
	 (setup ido
	   (ido-mode 'buffers) ;; only use this line to turn off ido for file names!
	   (setq ido-ignore-buffers '("^ " "*Completions*" "*Shell Command Output*"
								  "*Messages*" "Async Shell Command")))
   #+end_src

   #+RESULTS:
   

* Ligatures
#+begin_src emacs-lisp

(defvar +ligatures-extra-symbols
  '(;; org
    :name          "»"
    :src_block     "»"
    :src_block_end "«"
    :quote         "“"
    :quote_end     "”"
    ;; Functional
    :lambda        "λ"
    :def           "ƒ"
    :composition   "∘"
    :map           "↦"
    ;; Types
    :null          "∅"
    :true          "𝕋"
    :false         "𝔽"
    :int           "ℤ"
    :float         "ℝ"
    :str           "𝕊"
    :bool          "𝔹"
    :list          "𝕃"
    ;; Flow
    :not           "￢"
    :in            "∈"
    :not-in        "∉"
    :and           "∧"
    :or            "∨"
    :for           "∀"
    :some          "∃"
    :return        "⟼"
    :yield         "⟻"
    ;; Other
    :union         "⋃"
    :intersect     "∩"
    :diff          "∖"
    :tuple         "⨂"
    :pipe          "" ;; FIXME: find a non-private char
    :dot           "•")
  "Maps identifiers to symbols, recognized by `set-ligatures'.

This should not contain any symbols from the Unicode Private Area! There is no
universal way of getting the correct symbol as that area varies from font to
font.")
#+end_src

#+RESULTS:
: +ligatures-extra-symbols


** Set Ligatures!
#+begin_src emacs-lisp

(defun set-ligatures! (modes &rest plist)
  "Associates string patterns with icons in certain major-modes.

  MODES is a major mode symbol or a list of them.
  PLIST is a property list whose keys must match keys in
`+ligatures-extra-symbols', and whose values are strings representing the text
to be replaced with that symbol. If the car of PLIST is nil, then unset any
pretty symbols previously defined for MODES.

This function accepts one special property:

  :alist ALIST
    Appends ALIST to `prettify-symbols-alist' literally, without mapping text to
    `+ligatures-extra-symbols'.

For example, the rule for emacs-lisp-mode is very simple:

  (set-ligatures! 'emacs-lisp-mode
    :lambda \"lambda\")

This will replace any instances of \"lambda\" in emacs-lisp-mode with the symbol
assicated with :lambda in `+ligatures-extra-symbols'.

Pretty symbols can be unset for emacs-lisp-mode with:

  (set-ligatures! 'emacs-lisp-mode nil)"
  (declare (indent defun))
  (if (null (car-safe plist))
      (dolist (mode (ensure-list modes))
        (delq! mode +ligatures-extra-alist 'assq))
    (let (results)
      (while plist
        (let ((key (pop plist)))
          (if (eq key :alist)
              (prependq! results (pop plist))
            (when-let (char (plist-get +ligatures-extra-symbols key))
              (push (cons (pop plist) char) results)))))
      (dolist (mode (ensure-list modes))
        (setf (alist-get mode +ligatures-extra-alist)
              (if-let (old-results (alist-get mode +ligatures-extra-alist))
                  (dolist (cell results old-results)
                    (setf (alist-get (car cell) old-results) (cdr cell)))
                results))))))
#+end_src

#+RESULTS:
: set-ligatures!

** Ligatures extra alist
#+begin_src emacs-lisp

(defvar +ligatures-extra-alist '((t))
  "A map of major modes to symbol lists (for `prettify-symbols-alist').")
#+end_src

#+RESULTS:
: +ligatures-extra-alist
** Ligatures composition alist
#+begin_src emacs-lisp

(defvar +ligatures-composition-alist
  '((?!  . "\\(?:!\\(?:==\\|[!=]\\)\\)")                                      ; (regexp-opt '("!!" "!=" "!=="))
    (?#  . "\\(?:#\\(?:###?\\|_(\\|[#(:=?[_{]\\)\\)")                         ; (regexp-opt '("##" "###" "####" "#(" "#:" "#=" "#?" "#[" "#_" "#_(" "#{"))
    (?$  . "\\(?:\\$>>?\\)")                                                  ; (regexp-opt '("$>" "$>>"))
    (?%  . "\\(?:%%%?\\)")                                                    ; (regexp-opt '("%%" "%%%"))
    (?&  . "\\(?:&&&?\\)")                                                    ; (regexp-opt '("&&" "&&&"))
    (?*  . "\\(?:\\*\\(?:\\*[*/]\\|[)*/>]\\)?\\)")                            ; (regexp-opt '("*" "**" "***" "**/" "*/" "*>" "*)"))
    (?+  . "\\(?:\\+\\(?:\\+\\+\\|[+:>]\\)?\\)")                              ; (regexp-opt '("+" "++" "+++" "+>" "+:"))
    (?-  . "\\(?:-\\(?:-\\(?:->\\|[>-]\\)\\|<[<-]\\|>[>-]\\|[:<>|}~-]\\)\\)") ; (regexp-opt '("--" "---" "-->" "--->" "->-" "-<" "-<-" "-<<" "->" "->>" "-}" "-~" "-:" "-|"))
    (?.  . "\\(?:\\.\\(?:\\.[.<]\\|[.=>-]\\)\\)")                             ; (regexp-opt '(".-" ".." "..." "..<" ".=" ".>"))
    (?/  . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")                      ; (regexp-opt '("/*" "/**" "//" "///" "/=" "/==" "/>"))
    (?:  . "\\(?::\\(?:::\\|[+:<=>]\\)?\\)")                                  ; (regexp-opt '(":" "::" ":::" ":=" ":<" ":=" ":>" ":+"))
    (?\; . ";;")                                                              ; (regexp-opt '(";;"))
    (?0  . "0\\(?:\\(x[a-fA-F0-9]\\).?\\)") ; Tries to match the x in 0xDEADBEEF
    ;; (?x . "x") ; Also tries to match the x in 0xDEADBEEF
    ;; (regexp-opt '("<!--" "<$" "<$>" "<*" "<*>" "<**>" "<+" "<+>" "<-" "<--" "<---" "<->" "<-->" "<--->" "</" "</>" "<<" "<<-" "<<<" "<<=" "<=" "<=<" "<==" "<=>" "<===>" "<>" "<|" "<|>" "<~" "<~~" "<." "<.>" "<..>"))
    (?<  . "\\(?:<\\(?:!--\\|\\$>\\|\\*\\(?:\\*?>\\)\\|\\+>\\|-\\(?:-\\(?:->\\|[>-]\\)\\|[>-]\\)\\|\\.\\(?:\\.?>\\)\\|/>\\|<[<=-]\\|=\\(?:==>\\|[<=>]\\)\\||>\\|~~\\|[$*+./<=>|~-]\\)\\)")
    (?=  . "\\(?:=\\(?:/=\\|:=\\|<[<=]\\|=[=>]\\|>[=>]\\|[=>]\\)\\)")         ; (regexp-opt '("=/=" "=:=" "=<<" "==" "===" "==>" "=>" "=>>" "=>=" "=<="))
    (?>  . "\\(?:>\\(?:->\\|=>\\|>[=>-]\\|[:=>-]\\)\\)")                      ; (regexp-opt '(">-" ">->" ">:" ">=" ">=>" ">>" ">>-" ">>=" ">>>"))
    (??  . "\\(?:\\?[.:=?]\\)")                                               ; (regexp-opt '("??" "?." "?:" "?="))
    (?\[ . "\\(?:\\[\\(?:|]\\|[]|]\\)\\)")                                    ; (regexp-opt '("[]" "[|]" "[|"))
    (?\\ . "\\(?:\\\\\\\\[\\n]?\\)")                                          ; (regexp-opt '("\\\\" "\\\\\\" "\\\\n"))
    (?^  . "\\(?:\\^==?\\)")                                                  ; (regexp-opt '("^=" "^=="))
    (?w  . "\\(?:wwww?\\)")                                                   ; (regexp-opt '("www" "wwww"))
    (?{  . "\\(?:{\\(?:|\\(?:|}\\|[|}]\\)\\|[|-]\\)\\)")                      ; (regexp-opt '("{-" "{|" "{||" "{|}" "{||}"))
    (?|  . "\\(?:|\\(?:->\\|=>\\||=\\|[]=>|}-]\\)\\)")                        ; (regexp-opt '("|=" "|>" "||" "||=" "|->" "|=>" "|]" "|}" "|-"))
    (?_  . "\\(?:_\\(?:|?_\\)\\)")                                            ; (regexp-opt '("_|_" "__"))
    (?\( . "\\(?:(\\*\\)")                                                    ; (regexp-opt '("(*"))
    (?~  . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))                                  ; (regexp-opt '("~-" "~=" "~>" "~@" "~~" "~~>"))
  "An alist of all ligatures used by `+ligatures-extras-in-modes'.

The car is the character ASCII number, cdr is a regex which will call
`font-shape-gstring' when matched.

Because of the underlying code in :ui ligatures module, the regex should match a
string starting with the character contained in car.

This variable is used only if you built Emacs with Harfbuzz on a version >= 28")

#+end_src

#+RESULTS:
: +ligatures-composition-alist

** Ligatures in modes
#+begin_src emacs-lisp
(defvar +ligatures-in-modes
  '(not special-mode comint-mode eshell-mode term-mode vterm-mode Info-mode
        elfeed-search-mode elfeed-show-mode)
  "List of major modes where ligatures should be enabled.

  If t, enable it everywhere (except `fundamental-mode').
  If the first element is 'not, enable it in any mode besides what is listed.
  If nil, don't enable ligatures anywhere.")

#+end_src

#+RESULTS:
: +ligatures-in-modes

** Ligatures extra in modes
#+begin_src emacs-lisp
(defvar +ligatures-extras-in-modes t
  "List of major modes where extra ligatures should be enabled.

Extra ligatures are mode-specific substituions, defined in
`+ligatures-extra-symbols' and assigned with `set-ligatures!'. This variable
controls where these are enabled.

  If t, enable it everywhere (except `fundamental-mode').
  If the first element is 'not, enable it in any mode besides what is listed.
  If nil, don't enable these extra ligatures anywhere (though it's more
efficient to remove the `+extra' flag from the :ui ligatures module instead).")

#+end_src

#+RESULTS:
: +ligatures-extras-in-modes
** Ligatures init font hook
#+begin_src emacs-lisp
(defvar +ligatures--init-font-hook nil)

#+end_src

** Ligatures correct symbol bounds
#+begin_src emacs-lisp
(defun +ligatures--correct-symbol-bounds (ligature-alist)
  "Prepend non-breaking spaces to a ligature.

This way `compose-region' (called by `prettify-symbols-mode') will use the
correct width of the symbols instead of the width measured by `char-width'."
  (let ((len (length (car ligature-alist)))
        (acc (list   (cdr ligature-alist))))
    (while (> len 1)
      (setq acc (cons #X00a0 (cons '(Br . Bl) acc))
            len (1- len)))
    (cons (car ligature-alist) acc)))

#+end_src

#+RESULTS:
: +ligatures--correct-symbol-bounds

** Ligatures enable
#+begin_src emacs-lisp
(defun +ligatures--enable-p (modes)
  "Return t if ligatures should be enabled in this buffer depending on MODES."
  (unless (eq major-mode 'fundamental-mode)
    (or (eq modes t)
        (if (eq (car modes) 'not)
            (not (apply #'derived-mode-p (cdr modes)))
          (apply #'derived-mode-p modes)))))

#+end_src

#+RESULTS:
: +ligatures--enable-p

** Ligatures init buffer h
#+begin_src emacs-lisp
(defun +ligatures-init-buffer-h ()
  "Set up ligatures for the current buffer.

Extra ligatures are mode-specific substituions, defined in
`+ligatures-extra-symbols', assigned with `set-ligatures!', and made possible
with `prettify-symbols-mode'. This variable controls where these are enabled.
See `+ligatures-extras-in-modes' to control what major modes this function can
and cannot run in."
  (when after-init-time
    (let ((in-mode-p
           (+ligatures--enable-p +ligatures-in-modes))
          (in-mode-extras-p
           (and (modulep! +extra)
                (+ligatures--enable-p +ligatures-extras-in-modes))))
      (when in-mode-p
        (if (boundp '+ligature--composition-table)
            (setq-local composition-function-table +ligature--composition-table)
          (run-hooks '+ligatures--init-font-hook)
          (setq +ligatures--init-font-hook nil)))
      (when in-mode-extras-p
        (prependq! prettify-symbols-alist
                   (alist-get major-mode +ligatures-extra-alist)))
      (when (and (or in-mode-p in-mode-extras-p)
                 prettify-symbols-alist)
        (when prettify-symbols-mode
          (prettify-symbols-mode -1))
        (prettify-symbols-mode +1)))))


;;
;;; Bootstrap

;;;###package prettify-symbols
;; When you get to the right edge, it goes back to how it normally prints
(setq prettify-symbols-unprettify-at-point 'right-edge)

#+end_src

#+RESULTS:
: right-edge

** append ligatures init buffer to bonk init ui hook
#+begin_src emacs-lisp
;;   ;; (add-hook! 'bonk-init-ui-hook :append
;;   ;;   (defun +ligatures-init-h ()
;;   ;;     (add-hook 'after-change-major-mode-hook #'+ligatures-init-buffer-h)))

;; (cond
;;  ;; The emacs-mac build of Emacs appears to have built-in support for ligatures,
;;  ;; using the same composition-function-table method
;;  ;; https://bitbucket.org/mituharu/emacs-mac/src/26c8fd9920db9d34ae8f78bceaec714230824dac/lisp/term/mac-win.el?at=master#lines-345:805
;;  ;; so use that instead if this module is enabled.
;;  ((and IS-MAC (fboundp 'mac-auto-operator-composition-mode))
;;   (add-hook 'doom-init-ui-hook #'mac-auto-operator-composition-mode 'append))

;;  ;; Harfbuzz and Mac builds do not need font-specific ligature support
;;  ;; if they are above emacs-27.
;;  ((and (> emacs-major-version 27)
;;        (or (featurep 'ns)
;;            (string-match-p "HARFBUZZ" system-configuration-features))
;;        (featurep 'composite))  ; Emacs loads `composite' at startup
;;   (defvar +ligature--composition-table (make-char-table nil))
;;   (add-hook! 'doom-init-ui-hook :append
;;     (defun +ligature-init-composition-table-h ()
;;       (dolist (char-regexp +ligatures-composition-alist)
;;         (set-char-table-range
;;          +ligature--composition-table
;;          (car char-regexp) `([,(cdr char-regexp) 0 font-shape-gstring])))
;;       (set-char-table-parent +ligature--composition-table composition-function-table))))

;;  ;; Fallback ligature support for certain, patched fonts. Install them with
;;  ;; `+ligatures/install-patched-font'
;;  ((defmacro +ligatures--def-font (id font-plist &rest alist)
;;     (declare (indent 2))
;;     (let ((alist-var (intern (format "+ligatures-%s-font-alist" id)))
;;           (setup-fn  (intern (format "+ligatures-init-%s-font-h" id))))
;;       `(progn
;;          (setf (alist-get ',id +ligatures--font-alist) (list ,@font-plist))
;;          (defvar ,alist-var ',alist ,(format "Name of the %s ligature font." id))
;;          (defun ,setup-fn (&rest _)
;;            (cl-destructuring-bind (name &key _url files range)
;;                (or (alist-get ',id +ligatures--font-alist)
;;                    (error "No ligature font called %s" ',id))
;;              (when range
;;                (set-fontset-font t range name nil 'prepend))
;;              (setq-default prettify-symbols-alist
;;                            (append (default-value 'prettify-symbols-alist)
;;                                    (mapcar #'+ligatures--correct-symbol-bounds ,alist-var)))))
;;          (add-hook '+ligatures--init-font-hook #',setup-fn))))

;;   (defvar +ligatures--font-alist ())

;;   (cond ((modulep! +fira)         (load! "+fira"))
;;         ((modulep! +iosevka)      (load! "+iosevka"))
;;         ((modulep! +hasklig)      (load! "+hasklig"))
;;         ((modulep! +pragmata-pro) (load! "+pragmata-pro")))))
#+end_src
#+RESULTS:
